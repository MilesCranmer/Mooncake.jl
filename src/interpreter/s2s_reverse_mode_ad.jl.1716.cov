        - """
        -     SharedDataPairs()
        - 
        - A data structure used to manage the captured data in the `OpaqueClosures` which implement
        - the bulk of the forwards- and reverse-passes of AD. An entry `(id, data)` at element `n`
        - of the `pairs` field of this data structure means that `data` will be available at register
        - `id` during the forwards- and reverse-passes of `AD`.
        - 
        - This is achieved by storing all of the data in the `pairs` field in the captured tuple which
        - is passed to an `OpaqueClosure`, and extracting this data into registers associated to the
        - corresponding `ID`s.
        - """
        - struct SharedDataPairs
        -     pairs::Vector{Tuple{ID,Any}}
       39     SharedDataPairs() = new(Tuple{ID,Any}[])
        - end
        - 
        - """
        -     add_data!(p::SharedDataPairs, data)::ID
        - 
        - Puts `data` into `p`, and returns the `id` associated to it. This `id` should be assumed to
        - be available during the forwards- and reverse-passes of AD, and it should further be assumed
        - that the value associated to this `id` is always `data`.
        - """
     1688 function add_data!(p::SharedDataPairs, data)::ID
     1688     id = ID()
     1688     push!(p.pairs, (id, data))
     1688     return id
        - end
        - 
        - """
        -     shared_data_tuple(p::SharedDataPairs)::Tuple
        - 
        - Create the tuple that will constitute the captured variables in the forwards- and reverse-
        - pass `OpaqueClosure`s.
        - 
        - For example, if `p.pairs` is
        - ```julia
        - [(ID(5), 5.0), (ID(3), "hello")]
        - ```
        - then the output of this function is
        - ```julia
        - (5.0, "hello")
        - ```
        - """
       39 shared_data_tuple(p::SharedDataPairs)::Tuple = tuple(map(last, p.pairs)...)
        - 
        - """
        -     shared_data_stmts(p::SharedDataPairs)::Vector{IDInstPair}
        - 
        - Produce a sequence of id-statment pairs which will extract the data from
        - `shared_data_tuple(p)` such that the correct value is associated to the correct `ID`.
        - 
        - For example, if `p.pairs` is
        - ```julia
        - [(ID(5), 5.0), (ID(3), "hello")]
        - ```
        - then the output of this function is
        - ```julia
        - IDInstPair[
        -     (ID(5), new_inst(:(getfield(_1, 1)))),
        -     (ID(3), new_inst(:(getfield(_1, 2)))),
        - ]
        - ```
        - """
       78 function shared_data_stmts(p::SharedDataPairs)::Vector{IDInstPair}
       78     return map(enumerate(p.pairs)) do (n, p)
     3376         return (p[1], new_inst(Expr(:call, get_shared_data_field, Argument(1), n)))
        -     end
        - end
        - 
    15393 @inline get_shared_data_field(shared_data, n) = getfield(shared_data, n)
        - 
        - """
        - The block stack is the stack used to keep track of which basic blocks are visited on the
        - forwards pass, and therefore which blocks need to be visited on the reverse pass. There is
        - one block stack per derived rule.
        - By using Int32, we assume that there aren't more than `typemax(Int32)` unique basic blocks
        - in a given function, which ought to be reasonable.
        - """
        - const BlockStack = Stack{Int32}
        - 
        - """
        -     ADInfo
        - 
        - This data structure is used to hold "global" information associated to a particular call to
        - `build_rrule`. It is used as a means of communication between `make_ad_stmts!` and the
        - codegen which produces the forwards- and reverse-passes.
        - 
        - - `interp`: a `MooncakeInterpreter`.
        - - `block_stack_id`: the ID associated to the block stack -- the stack which keeps track of
        -     which blocks we visited during the forwards-pass, and which is used on the reverse-pass
        -     to determine which blocks to visit.
        - - `block_stack`: the block stack. Can always be found at `block_stack_id` in the forwards-
        -     and reverse-passes.
        - - `entry_id`: ID associated to the block inserted at the start of execution in the the
        -     forwards-pass, and the end of execution in the pullback.
        - - `shared_data_pairs`: the `SharedDataPairs` used to define the captured variables passed
        -     to both the forwards- and reverse-passes.
        - - `arg_types`: a map from `Argument` to its static type.
        - - `ssa_insts`: a map from `ID` associated to lines to the primal `NewInstruction`. This
        -     contains the line of code, its static / inferred type, and some other detailss. See
        -     `Core.Compiler.NewInstruction` for a full list of fields.
        - - `arg_rdata_ref_ids`: the dict mapping from arguments to the `ID` which creates and
        -     initialises the `Ref` which contains the reverse data associated to that argument.
        -     Recall that the heap allocations associated to this `Ref` are always optimised away in
        -     the final programme.
        - - `ssa_rdata_ref_ids`: the same as `arg_rdata_ref_ids`, but for each `ID` associated to an
        -     ssa rather than each argument.
        - - `debug_mode`: if `true`, run in "debug mode" -- wraps all rule calls in `DebugRRule`. This
        -     is applied recursively, so that debug mode is also switched on in derived rules.
        - - `is_used_dict`: for each `ID` associated to a line of code, is `false` if line is not used
        -     anywhere in any other line of code.
        - - `lazy_zero_rdata_ref_id`: for any arguments whose type doesn't permit the construction of
        -     a zero-valued rdata directly from the type alone (e.g. a struct with an abstractly-
        -     typed field), we need to have a zero-valued rdata available on the reverse-pass so that
        -     this zero-valued rdata can be returned if the argument (or a part of it) is never used
        -     during the forwards-pass and consequently doesn't obtain a value on the reverse-pass.
        -     To achieve this, we construct a `LazyZeroRData` for each of the arguments on the
        -     forwards-pass, and make use of it on the reverse-pass. This field is the ID that will be
        -     associated to this information.
        - """
        - struct ADInfo
       39     interp::MooncakeInterpreter
        -     block_stack_id::ID
        -     block_stack::BlockStack
        -     entry_id::ID
        -     shared_data_pairs::SharedDataPairs
        -     arg_types::Dict{Argument,Any}
        -     ssa_insts::Dict{ID,NewInstruction}
        -     arg_rdata_ref_ids::Dict{Argument,ID}
        -     ssa_rdata_ref_ids::Dict{ID,ID}
        -     debug_mode::Bool
        -     is_used_dict::Dict{ID,Bool}
        -     lazy_zero_rdata_ref_id::ID
        -     fwd_ret_type::Type
        -     rvs_ret_type::Type
        - end
        - 
        - # The constructor that you should use for ADInfo if you don't have a BBCode lying around.
        - # See the definition of the ADInfo struct for info on the arguments.
       39 function ADInfo(
        -     interp::MooncakeInterpreter,
        -     arg_types::Dict{Argument,Any},
        -     ssa_insts::Dict{ID,NewInstruction},
        -     is_used_dict::Dict{ID,Bool},
        -     debug_mode::Bool,
        -     zero_lazy_rdata_ref::Ref{<:Tuple},
        -     fwd_ret_type::Type,
        -     rvs_ret_type::Type,
        - )
       39     shared_data_pairs = SharedDataPairs()
       39     block_stack = BlockStack()
       39     return ADInfo(
        -         interp,
        -         add_data!(shared_data_pairs, block_stack),
        -         block_stack,
        -         ID(),
        -         shared_data_pairs,
        -         arg_types,
        -         ssa_insts,
        -         Dict((k, ID()) for k in keys(arg_types)),
        -         Dict((k, ID()) for k in keys(ssa_insts)),
        -         debug_mode,
        -         is_used_dict,
        -         add_data!(shared_data_pairs, zero_lazy_rdata_ref),
        -         fwd_ret_type,
        -         rvs_ret_type,
        -     )
        - end
        - 
        - # The constructor you should use for ADInfo if you _do_ have a BBCode lying around. See the
        - # ADInfo struct for information regarding `interp` and `debug_mode`.
       39 function ADInfo(
        -     interp::MooncakeInterpreter,
        -     ir::BBCode,
        -     debug_mode::Bool,
        -     fwd_ret_type::Type,
        -     rvs_ret_type::Type,
        - )
       39     arg_types = Dict{Argument,Any}(
      184         map(((n, t),) -> (Argument(n) => CC.widenconst(t)), enumerate(ir.argtypes))
        -     )
       39     stmts = collect_stmts(ir)
       39     ssa_insts = Dict{ID,NewInstruction}(stmts)
       39     is_used_dict = characterise_used_ids(stmts)
       39     Tlazy_rdata_ref = Tuple{map(lazy_zero_rdata_type âˆ˜ CC.widenconst, ir.argtypes)...}
       39     zero_lazy_rdata_ref = Ref{Tlazy_rdata_ref}()
       39     return ADInfo(
        -         interp,
        -         arg_types,
        -         ssa_insts,
        -         is_used_dict,
        -         debug_mode,
        -         zero_lazy_rdata_ref,
        -         fwd_ret_type,
        -         rvs_ret_type,
        -     )
        - end
        - 
        - """
        -     add_data!(info::ADInfo, data)::ID
        - 
        - Equivalent to `add_data!(info.shared_data_pairs, data)`.
        - """
     1610 add_data!(info::ADInfo, data)::ID = add_data!(info.shared_data_pairs, data)
        - 
        - """
        -     add_data_if_not_singleton!(p::Union{ADInfo, SharedDataPairs}, x)
        - 
        - Returns `x` if it is a singleton, or the `ID` of the ssa which will contain it on the
        - forwards- and reverse-passes. The reason for this is that if something is a singleton, it
        - can be inserted directly into the IR.
        - """
     8617 function add_data_if_not_singleton!(p::Union{ADInfo,SharedDataPairs}, x)
    10227     return Base.issingletontype(_typeof(x)) ? x : add_data!(p, x)
        - end
        - 
        - """
        -     is_used(info::ADInfo, id::ID)::Bool
        - 
        - Returns `true` if `id` is used by any of the lines in the ir, false otherwise.
        - """
     5314 is_used(info::ADInfo, id::ID)::Bool = info.is_used_dict[id]
        - 
        - """
        -     get_primal_type(info::ADInfo, x)
        - 
        - Returns the static / inferred type associated to `x`.
        - """
      944 get_primal_type(info::ADInfo, x::Argument) = info.arg_types[x]
    19338 get_primal_type(info::ADInfo, x::ID) = CC.widenconst(info.ssa_insts[x].type)
       69 get_primal_type(::ADInfo, x::QuoteNode) = _typeof(x.value)
     8977 get_primal_type(::ADInfo, x) = _typeof(x)
      692 function get_primal_type(::ADInfo, x::GlobalRef)
      692     return isconst(x) ? _typeof(getglobal(x.mod, x.name)) : x.binding.ty
        - end
        - function get_primal_type(::ADInfo, x::Expr)
        -     x.head === :boundscheck && return Bool
        -     return error("Unrecognised expression $x found in argument slot.")
        - end
        - 
        - """
        -     get_rev_data_id(info::ADInfo, x)
        - 
        - Returns the `ID` associated to the line in the reverse pass which will contain the
        - reverse data for `x`. If `x` is not an `Argument` or `ID`, then `nothing` is returned.
        - """
      916 get_rev_data_id(info::ADInfo, x::Argument) = info.arg_rdata_ref_ids[x]
     6546 get_rev_data_id(info::ADInfo, x::ID) = info.ssa_rdata_ref_ids[x]
        - get_rev_data_id(::ADInfo, ::Any) = nothing
        - 
        - """
        -     reverse_data_ref_stmts(info::ADInfo)
        - 
        - Create the `:new` statements which initialise the reverse-data `Ref`s. Interpolates the
        - initial rdata directly into the statement, which is safe because it is always a bits type.
        - """
       39 function reverse_data_ref_stmts(info::ADInfo)
    29405     function make_ref_stmt(id, P)
    57984         ref_type = Base.RefValue{P<:Type ? NoRData : zero_like_rdata_type(P)}
    57984         init_ref_val = P <: Type ? NoRData() : Mooncake.zero_like_rdata_from_type(P)
    29366         return (id, new_inst(Expr(:new, ref_type, QuoteNode(init_ref_val))))
        -     end
       39     return vcat(
        -         map(collect(info.arg_rdata_ref_ids)) do (k, id)
      184             return make_ref_stmt(id, CC.widenconst(info.arg_types[k]))
        -         end,
        -         map(collect(info.ssa_rdata_ref_ids)) do (k, id)
    29182             return make_ref_stmt(id, CC.widenconst(info.ssa_insts[k].type))
        -         end,
        -     )
        - end
        - 
        - # Returns the number of arguments that the primal function has.
      117 num_args(info::ADInfo) = length(info.arg_types)
        - 
        - """
        -     RRuleZeroWrapper(rule)
        - 
        - This struct is used to ensure that `ZeroRData`s, which are used as placeholder zero
        - elements whenever an actual instance of a zero rdata for a particular primal type cannot
        - be constructed without also having an instance of said type, never reach rules.
        - On the pullback, we increment the cotangent dy by an amount equal to zero. This ensures
        - that if it is a `ZeroRData`, we instead get an actual zero of the correct type. If it is
        - not a zero rdata, the computation _should_ be elided via inlining + constant prop.
        - """
        - struct RRuleZeroWrapper{Trule}
     1361     rule::Trule
        - end
        - 
     1067 _copy(x::P) where {P<:RRuleZeroWrapper} = P(_copy(x.rule))
        - 
        - struct RRuleWrapperPb{Tpb!!,Tl}
        0     pb!!::Tpb!!
        -     l::Tl
        - end
        - 
        - (rule::RRuleWrapperPb)(dy) = rule.pb!!(increment!!(dy, instantiate(rule.l)))
        - 
        0 @inline function (rule::RRuleZeroWrapper{R})(f::F, args::Vararg{CoDual,N}) where {R,F,N}
        0     y, pb!! = rule.rule(f, args...)
        0     l = lazy_zero_rdata(primal(y))
        0     return y::CoDual, (pb!! isa NoPullback ? pb!! : RRuleWrapperPb(pb!!, l))
        - end
        - 
        - """
        -     ADStmtInfo
        - 
        - Data structure which contains the result of `make_ad_stmts!`. Fields are
        - - `line`: the ID associated to the primal line from which this is derived
        - - `comms_id`: an `ID` from one of the lines in `fwds`, whose value will be made
        -     available on the reverse-pass in the same `ID`. Nothing is asserted about _how_ this
        -     value is made available on the reverse-pass of AD, so this package is free to do this in
        -     whichever way is most efficient, in particular to group these communication `ID` on a
        -     per-block basis.
        - - `fwds`: the instructions which run the forwards-pass of AD
        - - `rvs`: the instructions which run the reverse-pass of AD / the pullback
        - """
        - struct ADStmtInfo
    29182     line::ID
        -     comms_id::Union{ID,Nothing}
        -     fwds::Vector{IDInstPair}
        -     rvs::Vector{IDInstPair}
        - end
        - 
        - """
        -     ad_stmt_info(line::ID, comms_id::Union{ID, Nothing}, fwds, rvs)
        - 
        - Convenient constructor for `ADStmtInfo`. If either `fwds` or `rvs` is not a vector,
        - `__vec` promotes it to a single-element `Vector`.
        - """
    29182 function ad_stmt_info(line::ID, comms_id::Union{ID,Nothing}, fwds, rvs)
    34410     if !(comms_id === nothing || in(comms_id, map(first, __vec(line, fwds))))
        0         throw(ArgumentError("comms_id not found in IDs of `fwds` instructions."))
        -     end
    29182     return ADStmtInfo(line, comms_id, __vec(line, fwds), __vec(line, rvs))
        - end
        - 
    48173 __vec(line::ID, x::Any) = __vec(line, new_inst(x))
    48449 __vec(line::ID, x::NewInstruction) = IDInstPair[(line, x)]
        - __vec(line::ID, x::Vector{Tuple{ID,Any}}) = throw(error("boooo"))
    11383 __vec(line::ID, x::Vector{IDInstPair}) = x
        - 
        - """
        -     comms_channel(info::ADStmtInfo)
        - 
        - Return the element of `fwds` whose `ID` is the communcation `ID`. Returns `Nothing` if
        - `comms_id` is `nothing`.
        - """
    29182 function comms_channel(info::ADStmtInfo)
    29182     info.comms_id === nothing && return nothing
    17796     return only(filter(x -> x[1] == info.comms_id, info.fwds))
        - end
        - 
        - """
        -     inc_args(stmt)
        - 
        - Increment by `1` the `n` field of any `Argument`s present in `stmt`.
        - Used in `make_ad_stmts!`.
        - """
        - inc_args(x::Expr) = Expr(x.head, map(__inc, x.args)...)
      294 inc_args(x::ReturnNode) = isdefined(x, :val) ? ReturnNode(__inc(x.val)) : x
     1726 inc_args(x::IDGotoIfNot) = IDGotoIfNot(__inc(x.cond), x.dest)
     1592 inc_args(x::IDGotoNode) = x
        - function inc_args(x::IDPhiNode)
        -     new_values = Vector{Any}(undef, length(x.values))
        -     for n in eachindex(x.values)
        -         if isassigned(x.values, n)
        -             new_values[n] = __inc(x.values[n])
        -         end
        -     end
        -     return IDPhiNode(x.edges, new_values)
        - end
        - inc_args(::Nothing) = nothing
        - inc_args(x::GlobalRef) = x
        - 
      944 __inc(x::Argument) = Argument(x.n + 1)
     6462 __inc(x) = x
        - 
        - """
        -     make_ad_stmts!(inst::NewInstruction, line::ID, info::ADInfo)::ADStmtInfo
        - 
        - Every line in the primal code is associated to one or more lines in the forwards-pass of AD,
        - and one or more lines in the pullback. This function has method specific to every
        - node type in the Julia SSAIR.
        - 
        - Translates the instruction `inst`, associated to `line` in the primal, into a specification
        - of what should happen for this instruction in the forwards- and reverse-passes of AD, and
        - what data should be shared between the forwards- and reverse-passes. Returns this in the
        - form of an `ADStmtInfo`.
        - 
        - `info` is a data structure containing various bits of global information that certain types
        - of nodes need access to.
        - """
        - function make_ad_stmts! end
        - 
        - #=
        -     make_ad_stmts!(::Nothing, line::ID, ::ADInfo)
        - 
        - `nothing` as a statement in Julia IR indicates the presence of a line which will later be
        - removed. We emit a no-op on both the forwards- and reverse-passes. No shared data.
        - =#
      650 function make_ad_stmts!(::Nothing, line::ID, ::ADInfo)
      650     return ad_stmt_info(line, nothing, nothing, nothing)
        - end
        - 
        - #=
        -     make_ad_stmts!(stmt::ReturnNode, line::ID, info::ADInfo)
        - 
        - `ReturnNode`s have a single field, `val`, for which there are three cases to consider:
        - 
        - 1. `val` is undefined: this `ReturnNode` is unreachable. Consequently, we'll never hit the
        -   associated statements on the forwards-pass or pullback. We just return the original
        -   statement on the forwards-pass, and `nothing` on the reverse-pass.
        - 2. `val isa Union{Argument, ID}`: this is an active piece of data. Consequently, we know
        -   that it will be a `CoDual`, and can just return it. Therefore `stmt` is returned as the
        -   forwards-pass (with any `Argument`s incremented). On the reverse-pass the associated rdata
        -   ref should be incremented with the rdata passed to the pullback, residing in argument 2.
        - 3. `val` is defined, but not a `Union{Argument, ID}`: in this case we are returning a
        -   constant -- build a constant CoDual and return that. There is nothing to do on the
        -   reverse pass.
        - 
        - For cases 2 and 3, we also insert a call to `typeassert` to ensure that `info.fwd_ret_type`
        - is respected. A similar check for `info.rvs_ret_type` is handled elsewhere.
        - =#
      597 function make_ad_stmts!(stmt::ReturnNode, line::ID, info::ADInfo)
      597     if !is_reachable_return_node(stmt)
      294         return ad_stmt_info(line, nothing, inc_args(stmt), nothing)
        -     end
      304     if is_active(stmt.val)
      302         rdata_id = get_rev_data_id(info, stmt.val)
      302         rvs = increment_ref_stmts(rdata_id, Argument(2))
      302         assert_id = ID()
      604         val = __inc(stmt.val)
      604         fwds = [
        -             (assert_id, new_inst(Expr(:call, typeassert, val, info.fwd_ret_type))),
        -             (ID(), new_inst(ReturnNode(assert_id))),
        -         ]
      302         return ad_stmt_info(line, nothing, fwds, rvs)
        -     else
        1         const_id = ID()
        1         assert_id = ID()
        3         fwds = [
        -             (const_id, new_inst(const_codual_stmt(stmt.val, info))),
        -             (assert_id, new_inst(Expr(:call, typeassert, const_id, info.fwd_ret_type))),
        -             (ID(), new_inst(ReturnNode(assert_id))),
        -         ]
        1         return ad_stmt_info(line, nothing, fwds, nothing)
        -     end
        - end
        - 
        - # Identity forwards-pass, no-op reverse. No shared data.
     1592 function make_ad_stmts!(stmt::IDGotoNode, line::ID, ::ADInfo)
     1592     return ad_stmt_info(line, nothing, inc_args(stmt), nothing)
        - end
        - 
        - # Identity forwards-pass, no-op reverse. No shared data.
      863 function make_ad_stmts!(stmt::IDGotoIfNot, line::ID, ::ADInfo)
     1726     stmt = inc_args(stmt)
        - 
        -     # If cond is not going to be wrapped in a `CoDual`, so just return the stmt.
      863     is_active(stmt.cond) || return ad_stmt_info(line, nothing, stmt, nothing)
        - 
        -     # stmt.cond is active, so primal must be extracted from `CoDual`.
      863     cond_id = ID()
     1726     fwds = [
        -         (cond_id, new_inst(Expr(:call, primal, stmt.cond))),
        -         (line, new_inst(IDGotoIfNot(cond_id, stmt.dest), Any)),
        -     ]
      863     return ad_stmt_info(line, nothing, fwds, nothing)
        - end
        - 
        - # Identity forwards-pass, no-op reverse. No shared data.
      276 function make_ad_stmts!(stmt::IDPhiNode, line::ID, info::ADInfo)
      276     vals = stmt.values
      552     new_vals = Vector{Any}(undef, length(vals))
      276     for n in eachindex(vals)
      502         isassigned(vals, n) || continue
      502         new_vals[n] = inc_or_const(vals[n], info)
      728     end
        - 
        -     # It turns out to be really very important to do type inference correctly for PhiNodes.
        -     # For some reason, type inference really doesn't like it when you encounter mutually-
        -     # dependent PhiNodes whose types are unknown and for which you set the flag to
        -     # CC.IR_FLAG_REFINED. To avoid this we directly tell the compiler what the type is.
      276     new_type = fcodual_type(get_primal_type(info, line))
      552     _inst = new_inst(IDPhiNode(stmt.edges, new_vals), new_type, info.ssa_insts[line].flag)
      276     return ad_stmt_info(line, nothing, _inst, nothing)
        - end
        - 
        2 function make_ad_stmts!(stmt::PiNode, line::ID, info::ADInfo)
        - 
        -     # PiNodes of the form `Ï€ (nothing, Union{})` have started appearing in 1.11. These nodes
        -     # appear in unreachable sections of code, and appear to serve no purpose. Consequently,
        -     # we mark them for removal (replace them with `nothing`). We do not currently have a
        -     # unit test for this, but integration testing seems to catch it in multiple places.
        2     stmt == PiNode(nothing, Union{}) && return ad_stmt_info(line, nothing, stmt, nothing)
        - 
        2     if is_active(stmt.val)
        -         # Get the primal type of this line, and the rdata refs for the `val` of this
        -         # `PiNode` and this line itself.
        2         P = get_primal_type(info, line)
        2         val_rdata_ref_id = get_rev_data_id(info, stmt.val)
        2         output_rdata_ref_id = get_rev_data_id(info, line)
        4         fwds = PiNode(__inc(stmt.val), fcodual_type(CC.widenconst(stmt.typ)))
        - 
        -         # Get the rdata from the output_rdata_ref, and set its new value to zero, and
        -         # increment the output ref.
        2         output_rdata_id = ID()
        2         deref_stmts = deref_and_zero_stmts(P, output_rdata_ref_id, output_rdata_id)
        2         inc_exprs = increment_ref_stmts(val_rdata_ref_id, output_rdata_id)
        2         rvs = vcat(deref_stmts, inc_exprs)
        -     else
        -         # If the value of the PiNode is a constant / QuoteNode etc, then there is nothing to
        -         # do on the reverse-pass.
        0         const_id = ID()
        0         fwds = [
        -             (const_id, new_inst(const_codual_stmt(stmt.val, info))),
        -             (line, new_inst(PiNode(const_id, fcodual_type(CC.widenconst(stmt.typ))))),
        -         ]
        0         rvs = nothing
        -     end
        - 
        2     return ad_stmt_info(line, nothing, fwds, rvs)
        - end
        - 
        - # Constant GlobalRefs are handled. See const_codual. Non-constant GlobalRefs are handled by
        - # assuming that they are constant, and creating a CoDual with the value. We then check at
        - # run-time that the value has not changed.
        3 function make_ad_stmts!(stmt::GlobalRef, line::ID, info::ADInfo)
        3     isconst(stmt) && return const_ad_stmt(stmt, line, info)
        - 
        0     const_id, globalref_id = ID(), ID()
        0     fwds = [
        -         (globalref_id, new_inst(stmt)),
        -         (const_id, new_inst(const_codual_stmt(getglobal(stmt.mod, stmt.name), info))),
        -         (line, new_inst(Expr(:call, __verify_const, globalref_id, const_id))),
        -     ]
        0     return ad_stmt_info(line, nothing, fwds, nothing)
        - end
        - 
        - # Helper used by `make_ad_stmts! ` for `GlobalRef`. Noinline to avoid IR bloat.
        - @noinline function __verify_const(global_ref, stored_value)
        -     @assert global_ref == primal(stored_value)
        -     return uninit_fcodual(global_ref)
        - end
        - 
        - # QuoteNodes are constant.
        - make_ad_stmts!(stmt::QuoteNode, line::ID, info::ADInfo) = const_ad_stmt(stmt, line, info)
        - 
        - # Literal constant.
        - make_ad_stmts!(stmt, line::ID, info::ADInfo) = const_ad_stmt(stmt, line, info)
        - 
        - """
        -     const_ad_stmt(stmt, line::ID, info::ADInfo)
        - 
        - Implementation of `make_ad_stmts!` used for constants.
        - """
        3 function const_ad_stmt(stmt, line::ID, info::ADInfo)
        3     return ad_stmt_info(line, nothing, const_codual_stmt(stmt, info), nothing)
        - end
        - 
        - """
        -     const_codual_stmt(stmt, info::ADInfo)
        - 
        - Returns a `:call` expression which will return a `CoDual` whose primal is `stmt`, and whose
        - tangent is whatever `uninit_tangent` returns.
        - """
     9742 function const_codual_stmt(stmt, info::ADInfo)
     9742     v = get_const_primal_value(stmt)
     9742     if safe_for_literal(v)
     9742         return Expr(:call, uninit_fcodual, v)
        -     else
        0         return Expr(:call, identity, add_data!(info, uninit_fcodual(v)))
        -     end
        - end
        - 
        - """
        -     const_codual(stmt, info::ADInfo)
        - 
        - Build a `CoDual` from `stmt`, with zero / uninitialised fdata. If the resulting CoDual is
        - a bits type, then it is returned. If it is not, then the CoDual is put into shared data,
        - and the ID associated to it in the forwards- and reverse-passes returned.
        - """
      232 function const_codual(stmt, info::ADInfo)
      232     v = get_const_primal_value(stmt)
      232     x = uninit_fcodual(v)
      232     return safe_for_literal(v) ? x : add_data!(info, x)
        - end
        - 
    10031 function safe_for_literal(v)
    10031     v isa Expr && v.head === :boundscheck && return true
    10031     v isa String && return true
    10028     v isa Type && return true
     8954     v isa Tuple && all(safe_for_literal, v) && return true
     8940     isbitstype(_typeof(v)) && return true
        0     return false
        - end
        - 
      502 inc_or_const(stmt, info::ADInfo) = is_active(stmt) ? __inc(stmt) : const_codual(stmt, info)
        - 
     9738 function inc_or_const_stmt(stmt, info::ADInfo)
     9738     return if is_active(stmt)
        0         Expr(:call, identity, __inc(stmt))
        -     else
     9738         const_codual_stmt(stmt, info)
        -     end
        - end
        - 
        - """
        -     get_const_primal_value(x::GlobalRef)
        - 
        - Get the value associated to `x`. For `GlobalRef`s, verify that `x` is indeed a constant.
        - """
      901 function get_const_primal_value(x::GlobalRef)
      901     isconst(x) || unhandled_feature("Non-constant GlobalRef not supported: $x")
      901     return getglobal(x.mod, x.name)
        - end
       69 get_const_primal_value(x::QuoteNode) = x.value
     9597 get_const_primal_value(x) = x
        - 
        - # Mooncake does not yet handle `PhiCNode`s. Throw an error if one is encountered.
        - function make_ad_stmts!(stmt::Core.PhiCNode, ::ID, ::ADInfo)
        -     return unhandled_feature("Encountered PhiCNode: $stmt")
        - end
        - 
        - # Mooncake does not yet handle `UpsilonNode`s. Throw an error if one is encountered.
        - function make_ad_stmts!(stmt::Core.UpsilonNode, ::ID, ::ADInfo)
        -     return unhandled_feature(
        -         "Encountered UpsilonNode: $stmt. These are generated as part of some try / catch " *
        -         "/ finally blocks. At the present time, Mooncake.jl cannot differentiate through " *
        -         "these, so they must be avoided. Strategies for resolving this error include " *
        -         "re-writing code such that it avoids generating any UpsilonNodes, or writing a " *
        -         "rule to differentiate the code by hand. If you are in any doubt as to what to " *
        -         "do, please request assistance by opening an issue at " *
        -         "github.com/chalk-lab/Mooncake.jl.",
        -     )
        - end
        - 
        - # There are quite a number of possible `Expr`s that can be encountered. Each case has its
        - # own comment, explaining what is going on.
    25199 function make_ad_stmts!(stmt::Expr, line::ID, info::ADInfo)
    25199     is_invoke = Meta.isexpr(stmt, :invoke)
    45623     if Meta.isexpr(stmt, :call) || is_invoke
        - 
        -         # Find the types of all arguments to this call / invoke.
     5853         args = ((is_invoke ? stmt.args[2:end] : stmt.args)...,)
    21021         arg_types = map(arg -> get_primal_type(info, arg), args)
        - 
        -         # Special case: if the result of a call to getfield is un-used, then leave the
        -         # primal statment alone (just increment arguments as usual). This was causing
        -         # performance problems in a couple of situations where the field being requested is
        -         # not known at compile time. `getfield` cannot be dead-code eliminated, because it
        -         # can throw an error if the requested field does not exist. Everything _other_ than
        -         # the boundscheck is eliminated in LLVM codegen, so it's important that AD doesn't
        -         # get in the way of this.
        -         #
        -         # This might need to be generalised to more things than just `getfield`, but at the
        -         # time of writing this comment, it's unclear whether or not this is the case.
     5907         if !is_used(info, line) && get_const_primal_value(args[1]) == getfield
        0             fwds = new_inst(Expr(:call, __fwds_pass_no_ad!, map(__inc, args)...))
        0             return ad_stmt_info(line, nothing, fwds, nothing)
        -         end
        - 
        -         # Construct signature, and determine how the rrule is to be computed.
     5314         sig = Tuple{arg_types...}
     5314         raw_rule = if is_primitive(context_type(info.interp), sig)
     4836             rrule!! # intrinsic / builtin / thing we provably have rule for
      478         elseif is_invoke
      185             mi = stmt.args[1]::Core.MethodInstance
      185             LazyDerivedRule(mi, info.debug_mode) # Static dispatch
        -         else
     6085             DynamicDerivedRule(info.debug_mode)  # Dynamic dispatch
        -         end
        - 
        -         # Wrap the raw rule in a struct which ensures that any `ZeroRData`s are stripped
        -         # away before the raw_rule is called. Only do this if we cannot prove that the
        -         # output of `can_produce_zero_rdata_from_type(P)`, where `P` is the type of the
        -         # value returned by this line.
     5792         is_no_pullback = pullback_type(_typeof(raw_rule), arg_types) <: NoPullback
     5314         tmp = can_produce_zero_rdata_from_type(get_primal_type(info, line))
     5608         zero_wrapped_rule = (tmp || is_no_pullback) ? raw_rule : RRuleZeroWrapper(raw_rule)
        - 
        -         # If debug mode has been requested, use a debug rule.
     5314         rule = info.debug_mode ? DebugRRule(zero_wrapped_rule) : zero_wrapped_rule
        - 
        -         # If the rule is `rrule!!` (i.e. `sig` is primitive), then don't bother putting
        -         # the rule into shared data, because it's safe to put it directly into the code.
     5792         rule_ref = add_data_if_not_singleton!(info, rule)
        - 
        -         # If the type of the pullback is a singleton type, then there is no need to store it
        -         # in the shared data, it can be interpolated directly into the generated IR.
     5792         T_pb!! = pullback_type(_typeof(rule), arg_types)
        - 
        -         #
        -         # Write forwards-pass. These statements are written out manually, as writing them
        -         # out in a function would prevent inlining in some (all?) type-unstable situations.
        -         #
        - 
        -         # Make arguments to rrule call. Things which are not already CoDual must be made so.
     5314         codual_args = IDInstPair[]
     5314         codual_arg_ids = map(args) do arg
    15707             is_active(arg) && return __inc(arg)
     9738             id = ID()
     9738             push!(codual_args, (id, new_inst(inc_or_const_stmt(arg, info))))
     9738             return id
        -         end
        - 
        -         # Make call to rule.
     5314         rule_call_id = ID()
     5314         rule_call = Expr(:call, rule_ref, codual_arg_ids...)
        - 
        -         # Extract the output-codual from the returned tuple.
     5314         raw_output_id = ID()
     5314         raw_output = Expr(:call, getfield, rule_call_id, 1)
        - 
        -         # Extract the pullback from the returned tuple. Specialise on the case that the
        -         # pullback is provably a singleton type.
     5314         if Base.issingletontype(T_pb!!)
     3846             pb = T_pb!!.instance
     3846             pb_stmt = (ID(), new_inst(nothing))
     3846             comms_id = nothing
        -         else
     1468             pb = ID()
     1468             pb_stmt = (pb, new_inst(Expr(:call, getfield, rule_call_id, 2), T_pb!!))
     1468             comms_id = pb
        -         end
        - 
        -         # Provide a type assertion to help the compiler out. Doing it this way, rather than
        -         # directly changing the inferred type of the instruction associated to raw_output,
        -         # has the advantage of not introducing the possibility of segfaults. It will still
        -         # be optimised away in situations where the compiler is able to successfully infer
        -         # the type, so performance in performance-critical situations is unaffected.
     5314         output_id = line
     5314         F = fcodual_type(get_primal_type(info, line))
     5314         output = Expr(:call, Core.typeassert, raw_output_id, F)
        - 
        -         # Create statements associated to forwards-pass.
    21256         fwds = vcat(
        -             codual_args,
        -             IDInstPair[
        -                 (rule_call_id, new_inst(rule_call)),
        -                 (raw_output_id, new_inst(raw_output)),
        -                 pb_stmt,
        -                 (output_id, new_inst(output)),
        -             ],
        -         )
        - 
        -         # Make statement associated to reverse-pass. If the reverse-pass is provably a
        -         # NoPullback, then don't bother doing anything at all.
     5314         rvs_pass = if T_pb!! <: NoPullback
     2183             nothing
        -         else
        -             # Get the rdata which we pass into the pullback from its rdata ref.
     3131             rdata_ref_id = get_rev_data_id(info, line)
     3131             rdata_output_id = ID()
     3131             rdata_output_expr = Expr(:call, getfield, rdata_ref_id, QuoteNode(:x))
     3131             rdata_output = (rdata_output_id, new_inst(rdata_output_expr))
        - 
        -             # Zero out the value stored in this rdata ref now that we have its current
        -             # value. The new value is rdata, so must be an instance of a bits type, so is
        -             # safe to interpolate straight into instruction.
     3131             zero_val = zero_like_rdata_from_type(get_primal_type(info, line))
     3131             zero_rdata_expr = Expr(:call, setfield!, rdata_ref_id, QuoteNode(:x), zero_val)
     3131             zero_rdata_ref = (ID(), new_inst(zero_rdata_expr))
        - 
        -             # Run the pullback. The result is a tuple comprising `length(args)` elements.
     3131             call_pullback_id = ID()
     3131             call_pullback = (call_pullback_id, new_inst(Expr(:call, pb, rdata_output_id)))
        - 
        -             # For each element of the tuple returned by call_pullback, if the corresponding
        -             # value in the primal IR is an Argument / SSA (if `get_rev_data_id` does not
        -             # return nothing), increment the value in its rdata ref. This is equivalent to
        -             # rdata_ref[] = increment!!(rdata_ref[], rdata_inc_resulting_from_pullback),
        -             # but written out manually to ensure nothing fails to inline.
        -             # If the corresponding value in the primal IR is not an Argument / SSA (e.g. it
        -             # is a literal, a `QuoteNode`, or a `GlobalRef`), do nothing as we do not track
        -             # gradients w.r.t. it.
     3131             tmp = map(enumerate(args)) do (n, arg)
     9407                 rev_data_id = get_rev_data_id(info, arg)
        - 
        -                 # If arg is not an SSA / Argument, then no rdata ref to inc.
     9407                 rev_data_id === nothing && return nothing
        - 
        -                 # Extract rdata from result of calling pullback.
     3479                 rdata_inc_id = ID()
     3479                 rdata_inc_expr = Expr(:call, getfield, call_pullback_id, n)
     3479                 rdata_inc = (rdata_inc_id, new_inst(rdata_inc_expr))
        - 
        -                 # Construct statments to increment ref.
     3479                 return vcat(rdata_inc, increment_ref_stmts(rev_data_id, rdata_inc_id))
        -             end
        - 
        -             # Concatenate all statements, and return them.
     8445             vcat(
        -                 IDInstPair[rdata_output, zero_rdata_ref, call_pullback],
     9407                 reduce(vcat, filter(x -> !(x === nothing), tmp); init=IDInstPair[]),
        -             )
        -         end
     5314         return ad_stmt_info(line, comms_id, fwds, rvs_pass)
        - 
    19885     elseif Meta.isexpr(stmt, :boundscheck)
        -         # For some reason the compiler cannot handle boundscheck statements when we run it
        -         # again. Consequently, emit `true` to be safe. Ideally we would handle this in a
        -         # more natural way, but I'm not sure how to do that.
        0         return ad_stmt_info(line, nothing, zero_fcodual(true), nothing)
        - 
    19885     elseif Meta.isexpr(stmt, :code_coverage_effect)
        -         # Code coverage irrelevant for derived code, and really inflates it in some
        -         # situations. Since code coverage is usually only requrested during CI, including
        -         # these effects also creates differences between the code generated when developing
        -         # and the code generated in CI, which occassionally creates hard-to-debug issues.
    19845         return ad_stmt_info(line, nothing, nothing, nothing)
        - 
       40     elseif Meta.isexpr(stmt, :copyast)
        -         # Get constant out and shove it in shared storage.
        0         return ad_stmt_info(line, nothing, const_codual_stmt(stmt.args[1], info), nothing)
        - 
       40     elseif Meta.isexpr(stmt, :loopinfo)
        -         # Cannot pass loopinfo back through the optimiser for some reason.
        -         # At the time of writing, I am unclear why this is not possible.
       40         return ad_stmt_info(line, nothing, nothing, nothing)
        - 
        0     elseif stmt.head in [
        -         :enter,
        -         :gc_preserve_begin,
        -         :gc_preserve_end,
        -         :leave,
        -         :pop_exception,
        -         :throw_undef_if_not,
        -         :meta,
        -     ]
        -         # Expressions which do not require any special treatment.
        0         return ad_stmt_info(line, nothing, stmt, nothing)
        - 
        0     elseif stmt.head == :(=) && stmt.args[1] isa GlobalRef
        0         msg =
        -             "Encountered assignment to global variable: $(stmt.args[1]). " *
        -             "Cannot differentiate through assignments to globals. " *
        -             "Please refactor your code to avoid assigning to a global, for example by " *
        -             "passing the variable in to the function as an argument."
        0         unhandled_feature(msg)
        -     else
        -         # Encountered an expression that we've not seen before.
        0         throw(error("Unrecognised expression $stmt"))
        -     end
        - end
        - 
        - """
        -     increment_ref_stmts(ref_id::ID, inc_data)::Vector{IDInstPair}
        - 
        - Equivalent to `ref[] = increment!!(ref[], inc_data)`, where `ref` and `inc_data` are the
        - values associated to `ref_id` and `inc_data` respectively.
        - """
     4053 function increment_ref_stmts(ref_id::ID, inc_data)::Vector{IDInstPair}
        - 
        -     # Get the value stored in the `Base.RefValue`.
     4053     ref_val_id = ID()
     4053     ref_val = (ref_val_id, new_inst(Expr(:call, getfield, ref_id, QuoteNode(:x))))
        - 
        -     # Increment the value by inc_data.
     4053     new_val_id = ID()
     4053     new_val = (new_val_id, new_inst(Expr(:call, increment!!, ref_val_id, inc_data)))
        - 
        -     # Update the value stored in the rdata reference.
     4053     set_ref_expr = Expr(:call, setfield!, ref_id, QuoteNode(:x), new_val_id)
     4053     set_ref = (ID(), new_inst(set_ref_expr))
        - 
     4053     return IDInstPair[ref_val, new_val, set_ref]
        - end
        - 
        - is_active(::Union{Argument,ID}) = true
        - is_active(::Any) = false
        - 
        - """
        -     pullback_type(Trule, arg_types)
        - 
        - Get a bound on the pullback type, given a rule and associated primal types.
        - """
    10628 function pullback_type(Trule, arg_types)
    10628     T = Core.Compiler.return_type(Tuple{Trule,map(fcodual_type, arg_types)...})
    10628     return T <: Tuple ? _pullback_type(T) : Any
        - end
        - 
        - _pullback_type(::Core.TypeofBottom) = Any
     9749 _pullback_type(T::DataType) = T.parameters[2]
        2 _pullback_type(T::Union) = Union{_pullback_type(T.a),_pullback_type(T.b)}
        - 
        - # Used by the getfield special-case in call / invoke statments.
        - @inline function __fwds_pass_no_ad!(f::F, raw_args::Vararg{Any,N}) where {F,N}
        -     return tuple_splat(__get_primal(f), tuple_map(__get_primal, raw_args))
        - end
        - 
        - __get_primal(x::CoDual) = primal(x)
        - __get_primal(x) = x
        - 
        - const RuleMC{A,R} = MistyClosure{OpaqueClosure{A,R}}
        - 
        - #
        - # Runners for generated code. The main job of these functions is to handle the translation
        - # between differing varargs conventions.
        - #
        - 
        - struct Pullback{Tprimal,Tpb_args,Tpb_ret,isva,nargs}
      322     pb_oc::Base.RefValue{RuleMC{Tpb_args,Tpb_ret}}
        - end
        - 
      230 function Pullback(sig, pb_oc::Ref{<:RuleMC{A,R}}, isva::Bool, nargs::Int) where {A,R}
      322     return Pullback{sig,A,R,isva,nargs}(pb_oc)
        - end
        - 
       32 _isva(::Pullback{<:Any,<:Any,<:Any,isva}) where {isva} = isva
        0 _nargs(::Pullback{<:Any,<:Any,<:Any,<:Any,nargs}) where {nargs} = nargs
       16 function nvargs(pb::Pullback{sig}) where {sig}
       16     return Val{_isva(pb) ? _nargs(pb) - length(sig.parameters) + 1 : 0}
        - end
        - 
      254 @inline (pb::Pullback)(dy) = __flatten_varargs(_isva(pb), pb.pb_oc[].oc(dy), nvargs(pb)())
        - 
        - struct DerivedRule{Tprimal,Tfwd_args,Tfwd_ret,Tpb_args,Tpb_ret,isva,Tnargs<:Val}
      224     fwds_oc::RuleMC{Tfwd_args,Tfwd_ret}
        -     pb_oc_ref::Base.RefValue{RuleMC{Tpb_args,Tpb_ret}}
        -     nargs::Tnargs
        - end
        - 
      462 _isva(::DerivedRule{A,B,C,D,E,isva}) where {A,B,C,D,E,isva} = isva
        - 
       39 function DerivedRule(
        -     sig, fwds_oc::RuleMC{FA,FR}, pb_oc::Base.RefValue{RuleMC{RA,RR}}, isva::Bool, nargs::W
        - ) where {FA,FR,RA,RR,W}
       39     return DerivedRule{sig,FA,FR,RA,RR,isva,W}(fwds_oc, pb_oc, nargs)
        - end
        - 
        - # Extends functionality defined for debug_mode.
        - function verify_args(r::DerivedRule{sig}, x) where {sig}
        -     Tx = Tuple{map(_typeof âˆ˜ primal, __unflatten_codual_varargs(_isva(r), x, r.nargs))...}
        -     Tx <: sig && return nothing
        -     throw(ArgumentError("Arguments with sig $Tx do not subtype rule signature, $sig"))
        - end
        - 
        - _copy(::Nothing) = nothing
        - 
      185 function _copy(x::P) where {P<:DerivedRule}
      185     new_captures = _copy(x.fwds_oc.oc.captures)
      185     new_fwds_oc = replace_captures(x.fwds_oc, new_captures)
      185     new_pb_oc_ref = Ref(replace_captures(x.pb_oc_ref[], new_captures))
      185     return P(new_fwds_oc, new_pb_oc_ref, x.nargs)
        - end
        - 
        - _copy(x::Symbol) = x
        - 
      370 _copy(x::Tuple) = map(_copy, x)
        - 
        - _copy(x::NamedTuple) = map(_copy, x)
        - 
      185 _copy(x::Ref{T}) where {T} = isassigned(x) ? Ref{T}(_copy(x[])) : Ref{T}()
        - 
        - _copy(x::Type) = x
        - 
        - _copy(x) = copy(x)
        - 
      230 @inline function (fwds::DerivedRule{sig})(args::Vararg{CoDual,N}) where {sig,N}
      232     uf_args = __unflatten_codual_varargs(_isva(fwds), args, fwds.nargs)
      322     pb = Pullback(sig, fwds.pb_oc_ref, _isva(fwds), N)
      322     return fwds.fwds_oc.oc(uf_args...)::CoDual, pb
        - end
        - 
        - """
        -     __flatten_varargs(isva::Bool, args, ::Val{nvargs}) where {nvargs}
        - 
        - If isva, inputs (5.0, (4.0, 3.0)) are transformed into (5.0, 4.0, 3.0).
        - """
       16 function __flatten_varargs(isva::Bool, args, ::Val{nvargs}) where {nvargs}
       16     isva || return args
        0     last_el = isa(args[end], NoRData) ? ntuple(n -> NoRData(), nvargs) : args[end]
        0     return (args[1:(end - 1)]..., last_el...)
        - end
        - 
        - """
        -     __unflatten_codual_varargs(isva::Bool, args, ::Val{nargs}) where {nargs}
        - 
        - If isva and nargs=2, then inputs `(CoDual(5.0, 0.0), CoDual(4.0, 0.0), CoDual(3.0, 0.0))`
        - are transformed into `(CoDual(5.0, 0.0), CoDual((5.0, 4.0), (0.0, 0.0)))`.
        - """
      232 function __unflatten_codual_varargs(isva::Bool, args, ::Val{nargs}) where {nargs}
      242     isva || return args
       10     group_primal = map(primal, args[nargs:end])
        8     if fdata_type(tangent_type(_typeof(group_primal))) == NoFData
       10         grouped_args = zero_fcodual(group_primal)
        -     else
        0         grouped_args = CoDual(group_primal, map(tangent, args[nargs:end]))
        -     end
        8     return (args[1:(nargs - 1)]..., grouped_args)
        - end
        - 
        - #
        - # Rule derivation.
        - #
        - 
       12 _get_sig(sig::Type) = sig
      397 _get_sig(mi::Core.MethodInstance) = mi.specTypes
        - 
      224 function forwards_ret_type(primal_ir::IRCode)
      224     return fcodual_type(Base.Experimental.compute_ir_rettype(primal_ir))
        - end
        - 
      224 function pullback_ret_type(primal_ir::IRCode)
      224     return Tuple{map(rdata_type âˆ˜ tangent_type âˆ˜ CC.widenconst, primal_ir.argtypes)...}
        - end
        - 
        - struct MooncakeRuleCompilationError <: Exception
        0     interp::MooncakeInterpreter
        -     sig
        -     debug_mode::Bool
        - end
        - 
        - function Base.showerror(io::IO, err::MooncakeRuleCompilationError)
        -     msg =
        -         "MooncakeRuleCompilationError: an error occured while Mooncake was compiling a " *
        -         "rule to differentiate something. If the `caused by` error " *
        -         "message below does not make it clear to you how the problem can be fixed, " *
        -         "please open an issue at github.com/chalk-lab/Mooncake.jl describing your " *
        -         "problem.\n" *
        -         "To replicate this error run the following:\n"
        -     println(io, msg)
        -     println(
        -         io,
        -         "Mooncake.build_rrule(Mooncake.$(err.interp), $(err.sig); debug_mode=$(err.debug_mode))",
        -     )
        -     return println(
        -         io,
        -         "\nNote that you may need to `using` some additional packages if not all of the " *
        -         "names printed in the above signature are available currently in your environment.",
        -     )
        - end
        - 
        - """
        -     build_rrule(args...; kwargs...)
        - 
        - Helper method: equivalent to extracting the signature from `args` and calling
        - `build_rrule(sig; kwargs...)`.
        - """
        4 function build_rrule(args...; kwargs...)
        2     interp = get_interpreter()
        2     return build_rrule(interp, _typeof(TestUtils.__get_primals(args)); kwargs...)
        - end
        - 
        - """
        -     build_rrule(sig::Type{<:Tuple}; kwargs...)
        - 
        - Helper method: Equivalent to `build_rrule(Mooncake.get_interpreter(), sig; kwargs...)`.
        - """
        - build_rrule(sig::Type{<:Tuple}; kwargs...) = build_rrule(get_interpreter(), sig; kwargs...)
        - 
        - const MOONCAKE_INFERENCE_LOCK = ReentrantLock()
        - 
        - struct DerivedRuleInfo
       39     primal_ir::IRCode
        -     fwd_ir::IRCode
        -     fwd_ret_type::Type
        -     rvs_ir::IRCode
        -     rvs_ret_type::Type
        -     shared_data::Tuple
        -     info::ADInfo
        -     isva::Bool
        - end
        - 
        - """
        -     build_rrule(interp::MooncakeInterpreter{C}, sig_or_mi; debug_mode=false) where {C}
        - 
        - Returns a `DerivedRule` which is an `rrule!!` for `sig_or_mi` in context `C`. See the
        - docstring for `rrule!!` for more info.
        - 
        - If `debug_mode` is `true`, then all calls to rules are replaced with calls to `DebugRRule`s.
        - """
      448 function build_rrule(
        -     interp::MooncakeInterpreter{C}, sig_or_mi; debug_mode=false, silence_debug_messages=true
        - ) where {C}
        - 
        -     # To avoid segfaults, ensure that we bail out if the interpreter's world age is greater
        -     # than the current world age.
      224     if Base.get_world_counter() > interp.world
        0         throw(
        -             ArgumentError(
        -                 "World age associated to interp is behind current world age. Please " *
        -                 "a new interpreter for the current world age.",
        -             ),
        -         )
        -     end
        - 
        -     # If we're compiling in debug mode, let the user know by default.
      224     if !silence_debug_messages && debug_mode
        0         @info "Compiling rule for $sig_or_mi in debug mode. Disable for best performance."
        -     end
        - 
        -     # If we have a hand-coded rule, just use that.
      224     sig = _get_sig(sig_or_mi)
      224     if is_primitive(C, sig)
        0         rule = build_primitive_rrule(sig)
        0         return (debug_mode ? DebugRRule(rule) : rule)
        -     end
        - 
        -     # We don't have a hand-coded rule, so derived one.
      224     lock(MOONCAKE_INFERENCE_LOCK)
      224     try
        -         # If we've already derived the OpaqueClosures and info, do not re-derive, just
        -         # create a copy and pass in new shared data.
      224         oc_cache_key = ClosureCacheKey(interp.world, (sig_or_mi, debug_mode))
      224         if haskey(interp.oc_cache, oc_cache_key)
      185             return _copy(interp.oc_cache[oc_cache_key])
        -         else
        -             # Derive forwards- and reverse-pass IR, and shove in `MistyClosure`s.
       39             dri = generate_ir(interp, sig_or_mi; debug_mode)
       39             fwd_oc = misty_closure(dri.fwd_ret_type, dri.fwd_ir, dri.shared_data...)
       39             rvs_oc = misty_closure(dri.rvs_ret_type, dri.rvs_ir, dri.shared_data...)
        - 
        -             # Compute the signature. Needs careful handling with varargs.
       39             nargs = num_args(dri.info)
       39             if dri.isva
        1                 sig = Tuple{
        -                     sig.parameters[1:(nargs - 1)]...,Tuple{sig.parameters[nargs:end]...}
        -                 }
        -             end
        - 
       39             raw_rule = DerivedRule(sig, fwd_oc, Ref(rvs_oc), dri.isva, Val(nargs))
       39             rule = debug_mode ? DebugRRule(raw_rule) : raw_rule
       78             interp.oc_cache[oc_cache_key] = rule
       39             return rule
        -         end
        -     catch e
        0         if e isa MooncakeRuleCompilationError
        0             rethrow(e)
        -         else
        0             sig = sig_or_mi isa Core.MethodInstance ? sig_or_mi.specTypes : sig_or_mi
        0             throw(MooncakeRuleCompilationError(interp, sig, debug_mode))
        -         end
        -     finally
      224         unlock(MOONCAKE_INFERENCE_LOCK)
        -     end
        - end
        - 
        - """
        -     generate_ir(
        -         interp::MooncakeInterpreter, sig_or_mi; debug_mode=false, do_inline=true
        -     )
        - Used by `build_rrule`, and the various debugging tools: primal_ir, fwds_ir, adjoint_ir.
        - """
       78 function generate_ir(
        -     interp::MooncakeInterpreter, sig_or_mi; debug_mode=false, do_inline=true
        - )
        -     # Reset id count. This ensures that the IDs generated are the same each time this
        -     # function runs.
       39     seed_id!()
        - 
        -     # Grab code associated to the primal.
       39     ir, _ = lookup_ir(interp, sig_or_mi)
       39     Treturn = Base.Experimental.compute_ir_rettype(ir)
       39     fwd_ret_type = forwards_ret_type(ir)
       39     rvs_ret_type = pullback_ret_type(ir)
        - 
        -     # Normalise the IR, and generated BBCode version of it.
       39     isva, spnames = is_vararg_and_sparam_names(sig_or_mi)
       39     ir = normalise!(ir, spnames)
       39     primal_ir = remove_unreachable_blocks!(BBCode(ir))
        - 
        -     # Compute global info.
       39     info = ADInfo(interp, primal_ir, debug_mode, fwd_ret_type, rvs_ret_type)
        - 
        -     # For each block in the fwds and pullback BBCode, translate all statements. Running this
        -     # will, in general, push items to `info.shared_data_pairs`.
       39     ad_stmts_blocks = map(primal_ir.blocks) do primal_blk
     3303         ids = primal_blk.inst_ids
    32485         primal_stmts = map(x -> x.stmt, primal_blk.insts)
     3303         return (primal_blk.id, make_ad_stmts!.(primal_stmts, ids, Ref(info)))
        -     end
        - 
        -     # Make shared data, and construct BBCode for forwards-pass and pullback.
       39     fwds_comms_insts, pb_comms_insts = create_comms_insts!(ad_stmts_blocks, info)
       39     shared_data = shared_data_tuple(info.shared_data_pairs)
        - 
       39     fwd_ir = forwards_pass_ir(
        -         primal_ir, ad_stmts_blocks, fwds_comms_insts, info, _typeof(shared_data)
        -     )
       39     rvs_ir = pullback_ir(
        -         primal_ir, Treturn, ad_stmts_blocks, pb_comms_insts, info, _typeof(shared_data)
        -     )
       39     opt_fwd_ir = optimise_ir!(IRCode(fwd_ir); do_inline)
       39     opt_rvs_ir = optimise_ir!(IRCode(rvs_ir); do_inline)
       39     return DerivedRuleInfo(
        -         ir, opt_fwd_ir, fwd_ret_type, opt_rvs_ir, rvs_ret_type, shared_data, info, isva
        -     )
        - end
        - 
        - """
        -     replace_captures(oc::Toc, new_captures) where {Toc<:OpaqueClosure}
        - 
        - Given an `OpaqueClosure` `oc`, create a new `OpaqueClosure` of the same type, but with new
        - captured variables. This is needed for efficiency reasons -- if `build_rrule` is called
        - repeatedly with the same signature and intepreter, it is important to avoid recompiling
        - the `OpaqueClosure`s that it produces multiple times, because it can be quite expensive to
        - do so.
        - """
      370 function replace_captures(oc::Toc, new_captures) where {Toc<:OpaqueClosure}
      370     return __replace_captures_internal(oc, new_captures)
        - end
        - 
      370 @eval function __replace_captures_internal(oc::Toc, new_captures) where {Toc<:OpaqueClosure}
      370     return $(Expr(
        -         :new, :(Toc), :new_captures, :(oc.world), :(oc.source), :(oc.invoke), :(oc.specptr)
        -     ))
        - end
        - 
        - """
        -     replace_captures(mc::Tmc, new_captures) where {Tmc<:MistyClosure}
        - 
        - Same as `replace_captures` for `Core.OpaqueClosure`s, but returns a new `MistyClosure`.
        - """
      370 function replace_captures(mc::Tmc, new_captures) where {Tmc<:MistyClosure}
      370     return Tmc(replace_captures(mc.oc, new_captures), mc.ir)
        - end
        - 
        - const ADStmts = Vector{Tuple{ID,Vector{ADStmtInfo}}}
        - 
        - """
        -     create_comms_insts!(ad_stmts_blocks::ADStmts, info::ADInfo)
        - 
        - This function produces code which can be inserted into the forwards-pass and reverse-pass at
        - specific locations to implement the promise associated to the `comms_id` field of the
        - `ADStmtInfo` type -- namely that if you assign a value to `comms_id` on the forwards-pass,
        - the same value will be available at `comms_id` on the reverse-pass.
        - 
        - For each basic block represented in `ADStmts`:
        - 1. create a stack containing a `Tuple` which can hold all of the values associated to the
        -     `comms_id`s for each statement. Put this stack in shared data.
        - 2. create instructions which can be inserted at the _end_ of the block generated to perform
        -     the forwards-pass (in `forwards_pass_ir`) which will put all of the data associated to
        -     the `comms_id`s into shared data, and
        - 3. create instruction which can be inserted at the _start_ of the block generated to perform
        -     the reverse-pass (in `pullback_ir`), which will extract all of the data put into
        -     shared data by the instructions generated by the previous point, and assigned them to
        -     the `comms_id`s.
        - 
        - Returns two a `Tuple{Vector{IDInstPair}, Vector{IDInstPair}`. The nth element of each
        - `Vector` corresponds to the instructions to be inserted into the forwards- and reverse
        - passes resp. for the nth block in `ad_stmts_blocks`.
        - """
       39 function create_comms_insts!(ad_stmts_blocks::ADStmts, info::ADInfo)
       39     insts = map(ad_stmts_blocks) do (_, ad_stmts)
        - 
        -         # Get the communication channel for each stmt which has one.
     4435         comms_channels = filter(!=(nothing), map(comms_channel, ad_stmts))
     3303         comms_ids = map(first, comms_channels)
        - 
        -         # Determine the type of the tuple which will contain these, and create a stack which
        -         # can hold such tuples. Put this stack in shared data, and get its `ID`.
        -         # Optimise for the case that `TT` is a singleton type -- the result of this
        -         # optimisation is to directly insert the stack into the code if `TT` is a singleton
        -         # type, and avoid adding anything to shared data. One notable case in which this
        -         # will hold is when comms_ids is empty.
     4771         TT = Tuple{map(x -> x[2].type, comms_channels)...}
     4435         stack = Base.issingletontype(TT) ? SingletonStack{TT}() : Stack{TT}()
     3303         comms_stack_id = add_data_if_not_singleton!(info, stack)
        - 
        -         # Create instructions for forwards-pass to create tuple + push onto comms stack.
     3303         tuple_id = ID()
     6606         fwds_insts = IDInstPair[
        -             (tuple_id, new_inst(Expr(:call, tuple, comms_ids...))),
        -             (ID(), new_inst(Expr(:call, push!, comms_stack_id, tuple_id))),
        -         ]
        - 
        -         # Create instructions for reverse-pass to pop comms stack and extract elements of
        -         # tuple into comms ids.
     3303         rvs_insts = IDInstPair[
        -             (tuple_id, new_inst(Expr(:call, pop!, comms_stack_id))),
        -             map(enumerate(comms_ids)) do (n, id)
     1468                 (id, new_inst(Expr(:call, getfield, tuple_id, n)))
        -             end...,
        -         ]
        - 
     3303         return fwds_insts, rvs_insts
        -     end
       39     return map(first, insts), map(last, insts)
        - end
        - 
        - """
        -     forwards_pass_ir(ir::BBCode, ad_stmts_blocks::ADStmts, info::ADInfo, Tshared_data)
        - 
        - Produce the IR associated to the `OpaqueClosure` which runs most of the forwards-pass.
        - """
       39 function forwards_pass_ir(
        -     ir::BBCode, ad_stmts_blocks::ADStmts, fwds_comms_insts, info::ADInfo, Tshared_data
        - )
       39     is_unique_pred, pred_is_unique_pred = characterise_unique_predecessor_blocks(ir.blocks)
        - 
        -     # Insert a block at the start which extracts all items from the captures field of the
        -     # `OpaqueClosure`, which contains all of the data shared between the forwards- and
        -     # reverse-passes. These are assigned to the `ID`s given by the `SharedDataPairs`.
        -     # Push the entry id onto the block stack if needed. Create `LazyZeroRData` for each
        -     # argument, and put it in the `Ref` for use on the reverse-pass.
       39     sds = shared_data_stmts(info.shared_data_pairs)
       39     if pred_is_unique_pred[ir.blocks[1].id]
       39         push_block_stack_insts = IDInstPair[]
        -     else
        0         push_block_stack_stmt = Expr(
        -             :call, __push_blk_stack!, info.block_stack_id, info.entry_id.id
        -         )
        0         push_block_stack_insts = [(ID(), new_inst(push_block_stack_stmt))]
        -     end
       39     lazy_zero_rdata_stmt = Expr(
        -         :call,
        -         __assemble_lazy_zero_rdata,
        -         info.lazy_zero_rdata_ref_id,
      184         map(n -> Argument(n + 1), 1:num_args(info))...,
        -     )
       39     lazy_zero_rdata_insts = [(ID(), new_inst(lazy_zero_rdata_stmt))]
       39     entry_stmts = vcat(sds, lazy_zero_rdata_insts, push_block_stack_insts)
       39     entry_block = BBlock(info.entry_id, entry_stmts)
        - 
        -     # Construct augmented version of each basic block from the primal. For each block:
        -     # 1. pull the translated basic block statements from ad_stmts_blocks,
        -     # 2. insert a series of statements to log the contents of the `comms_id`s -- see
        -     #   the `comms_id` field of `ADStmtInfo`,
        -     # 3. insert a statement which logs the ID of the current block (if necessary to know
        -     #   how to perform the reverse-pass),
        -     # 4. return the BBlock.
       39     blocks = map(ad_stmts_blocks, fwds_comms_insts) do (block_id, ad_stmts), comms_insts
        - 
        -         # Extract the `fwds` fields from the stmts, and create the block for the fwds pass.
    32485         blk = BBlock(block_id, reduce(vcat, map(x -> x.fwds, ad_stmts)))
        - 
        -         # Insert communcation instructions. See `create_comms_insts!` for an explanation.
     3303         for stack_inst in comms_insts
     6606             insert_before_terminator!(blk, stack_inst[1], stack_inst[2])
     6606         end
        - 
        -         # Log the ID of the current basic block. This is needed to know which basic block to
        -         # jump to during the reverse-pass if the current block is not the unique predecessor
        -         # of each of its successors (in which case there is no need to log that control
        -         # passed through this block as opposed to any other).
     3303         if !is_unique_pred[block_id]
     1169             ins_stmt = Expr(:call, __push_blk_stack!, info.block_stack_id, block_id.id)
     1169             insert_before_terminator!(blk, ID(), new_inst(ins_stmt))
        -         end
        - 
     3303         return blk
        -     end
        - 
        -     # Create and return the `BBCode` for the forwards-pass.
       39     arg_types = vcat(Tshared_data, map(fcodual_type âˆ˜ CC.widenconst, ir.argtypes))
       78     ir = BBCode(vcat(entry_block, blocks), arg_types, ir.sptypes, ir.linetable, ir.meta)
       39     return remove_unreachable_blocks!(ir)
        - end
        - 
        - """
        -     __push_blk_stack!(block_stack::BlockStack, id::Int32)
        - 
        - Equivalent to `push!(block_stack, id)`. Going via this function, rather than just calling
        - push! directly, is helpful for debugging and performance analysis -- it makes it very
        - straightforward to figure out much time is spent pushing to the block stack when profiling.
        - """
     4164 @inline __push_blk_stack!(block_stack::BlockStack, id::Int32) = push!(block_stack, id)
        - 
        0 __lazy_zero_rdata_primal(T, x) = lazy_zero_rdata(T, primal(x))
        - 
        0 @inline @generated function __assemble_lazy_zero_rdata(
        -     r::Ref{T}, args::Vararg{CoDual,N}
        - ) where {T<:Tuple,N}
       33     return :(r[] = tuple_map(__lazy_zero_rdata_primal, $(fieldtypes(T)), args))
        - end
        - 
        - """
        -     pullback_ir(ir::BBCode, Tret, ad_stmts_blocks::ADStmts, info::ADInfo, Tshared_data)
        - 
        - Produce the IR associated to the `OpaqueClosure` which runs most of the pullback.
        - """
       39 function pullback_ir(
        -     ir::BBCode, Tret, ad_stmts_blocks::ADStmts, pb_comms_insts, info::ADInfo, Tshared_data
        - )
        -     # Compute the blocks which return in the primal.
       39     primal_exit_blocks_inds = findall(is_reachable_return_node âˆ˜ terminator, ir.blocks)
        - 
        -     #
        -     # Short-circuit for non-terminating primals -- applies to a tiny fraction of primals:
        -     #
        - 
        -     # If there are no blocks which successfully return in the primal, then the primal never
        -     # terminates without throwing, meaning that if AD hits this function, it definitely
        -     # won't succeed on the forwards-pass. As such, the reverse-pass can just be a no-op.
       39     if isempty(primal_exit_blocks_inds)
        0         blocks = [BBlock(ID(), [(ID(), new_inst(ReturnNode(nothing)))])]
        0         return BBCode(blocks, Any[Any], ir.sptypes, ir.linetable, ir.meta)
        -     end
        - 
        -     #
        -     # Standard path pullback generation -- applies to 99% of primals:
        -     #
        - 
        -     # Compute the argument types associated to the reverse-pass.
       39     arg_types = vcat(Tshared_data, rdata_type(tangent_type(Tret)))
        - 
        -     # Create entry block which:
        -     # 1. extracts items from shared data to the correct IDs,
        -     # 2. creates `Ref`s (which will be optimised away later) to hold rdata for all ssas,
        -     # 3. create switch statement to block which terminated the forwards pass. If there is
        -     #   only a single block in the primal containing a reachable ReturnNode, then there is
        -     #   no need to pop the block stack.
       39     data_stmts = shared_data_stmts(info.shared_data_pairs)
       39     rev_data_ref_stmts = reverse_data_ref_stmts(info)
      342     exit_blocks_ids = map(n -> ir.blocks[n].id, primal_exit_blocks_inds)
       39     switch_stmts = make_switch_stmts(exit_blocks_ids, length(exit_blocks_ids) == 1, info)
       39     entry_block = BBlock(ID(), vcat(data_stmts, rev_data_ref_stmts, switch_stmts))
        - 
        -     # For each basic block in the primal:
        -     # 1. if the block is reachable on the reverse-pass, the bulk of its statements are the
        -     #   translated basic block statements, in reverse.
        -     # 2. if, on the other hand, the block is provably not reachable on the reverse-pass,
        -     #   return a block with nothing in it. At present we only assert that a block is not
        -     #   reachable if it ends with an unreachable `Core.ReturnNode`.
        -     # 3. if we need to pop the predecessor stack, pop it. We don't need to pop it if there
        -     #   is only a single predecessor to this block, and said predecessor is a _unique_
        -     #   _predecessor_ (see characterise_unique_predecessor_blocks for more info), as its
        -     #   ID is uniquely determined, and nothing will have been put on to the block stack
        -     #   during the forwards-pass (see how the output of
        -     #   characterise_unique_predecessor_blocks is used in forwards_pass_ir).
        -     # 4. if the block began with one or more PhiNodes, then handle their rdata.
        -     # 5. jump to the predecessor block.
       39     ps = compute_all_predecessors(ir)
       39     _, pred_is_unique_pred = characterise_unique_predecessor_blocks(ir.blocks)
       39     main_blocks = map(
        -         ad_stmts_blocks, enumerate(ir.blocks), pb_comms_insts
        -     ) do (blk_id, ad_stmts), (n, blk), comms_insts
        - 
        -         # Short-circuit if we know that this block cannot be reached on the reverse-pass.
     6009         if is_unreachable_return_node(terminator(blk))
      294             return BBlock(blk_id, [(ID(), new_inst(nothing))])
        -         end
        - 
        -         # Extract reverse-stmts from ad_stmts.
     3009         rvs_ad_stmts = reduce(vcat, [x.rvs for x in reverse(ad_stmts)])
        - 
        -         # Conclude the block.
     5979         pred_ids = vcat(ps[blk.id], n == 1 ? [info.entry_id] : ID[])
     3009         tmp = pred_is_unique_pred[blk_id]
     3009         additional_stmts, new_blocks = conclude_rvs_block(blk, pred_ids, tmp, info)
        - 
        -         # Combine all blocks and return. See `create_comms_insts!` for more info regarding
        -         # `comms_insts`.
     3009         rvs_block = BBlock(blk_id, vcat(comms_insts, rvs_ad_stmts, additional_stmts))
     3009         return vcat(rvs_block, new_blocks)
        -     end
       39     main_blocks = reduce(vcat, main_blocks)
        - 
        -     # Create an exit block. Dereferences reverse-data for arguments, increments a zero rdata
        -     # against it to ensure that it is of the correct type, and returns it.
      223     arg_rdata_ref_ids = map(n -> info.arg_rdata_ref_ids[Argument(n)], 1:num_args(info))
        - 
        -     # De-reference the lazy zero rdata.
       39     lazy_zero_rdata_tuple_id = ID()
       39     lazy_zero_rdata_tuple = new_inst(Expr(:call, getindex, info.lazy_zero_rdata_ref_id))
        - 
        -     # For each argument, dereference its rdata, and increment said rdata against the zero
        -     # rdata element.
       39     final_ids = Vector{ID}()
       39     rdata_extraction_stmts = map(eachindex(arg_rdata_ref_ids)) do n
        - 
        -         # De-reference the nth rdata.
      184         rdata_id = ID()
      184         rdata = new_inst(Expr(:call, getfield, arg_rdata_ref_ids[n], QuoteNode(:x)))
        - 
        -         # Get the nth lazy zero rdata.
      184         lazy_zero_rdata_id = ID()
      184         lazy_zero_rdata = new_inst(Expr(:call, getfield, lazy_zero_rdata_tuple_id, n))
        - 
        -         # Instantiate the nth zero rdata.
      184         zero_rdata_id = ID()
      184         zero_rdata = new_inst(Expr(:call, instantiate, lazy_zero_rdata_id))
        - 
        -         # Increment the rdata.
      184         final_rdata_id = ID()
      184         final_rdata = new_inst(Expr(:call, increment!!, rdata_id, zero_rdata_id))
        - 
        -         # Log the ID of the rdata to return.
      184         push!(final_ids, final_rdata_id)
        - 
      184         return IDInstPair[
        -             (rdata_id, rdata),
        -             (lazy_zero_rdata_id, lazy_zero_rdata),
        -             (zero_rdata_id, zero_rdata),
        -             (final_rdata_id, final_rdata),
        -         ]
        -     end
        - 
        -     # Construct a tuple containing all of the rdata.
       39     deref_id = ID()
       39     deref = new_inst(Expr(:call, tuple, final_ids...))
        - 
        -     # Assert the type of the return value subtypes info.rvs_ret_type.
       39     assert_id = ID()
       39     assert = new_inst(Expr(:call, typeassert, deref_id, info.rvs_ret_type))
        - 
        -     # Construct return node and assemble final basic block.
       39     ret = new_inst(ReturnNode(assert_id))
      117     exit_block = BBlock(
        -         info.entry_id,
        -         vcat(
        -             (lazy_zero_rdata_tuple_id, lazy_zero_rdata_tuple),
        -             rdata_extraction_stmts...,
        -             [(deref_id, deref), (assert_id, assert), (ID(), ret)],
        -         ),
        -     )
        - 
        -     # Create and return `BBCode` for the pullback. Sort the blocks and remove any blocks
        -     # which are unreachable, in the sense that they have no predecessors (except the entry
        -     # block). This ought not to be necessary, but _appears_ to be necessary in order to
        -     # avoid annoying the Julia compiler.
       39     blks = vcat(entry_block, main_blocks, exit_block)
       78     pb_ir = BBCode(blks, arg_types, ir.sptypes, ir.linetable, ir.meta)
       39     return remove_unreachable_blocks!(sort_blocks!(pb_ir))
        - end
        - 
        - """
        -     conclude_rvs_block(
        -         blk::BBlock, pred_ids::Vector{ID}, pred_is_unique_pred::Bool, info::ADInfo
        -     )
        - 
        - Generates code which is inserted at the end of each counterpart block in the reverse-pass.
        - Handles phi nodes, and choosing the correct next block to switch to.
        - """
     3009 function conclude_rvs_block(
        -     blk::BBlock, pred_ids::Vector{ID}, pred_is_unique_pred::Bool, info::ADInfo
        - )
        -     # Get the PhiNodes and their IDs.
     3009     phi_ids, phis = phi_nodes(blk)
        - 
        -     # If there are no PhiNodes in this block, switch directly to the predecessor.
     3009     if length(phi_ids) == 0
     2800         return make_switch_stmts(pred_ids, pred_is_unique_pred, info), BBlock[]
        -     end
        - 
        -     # Create statements which extract + zero the rdata refs associated to them.
      485     rdata_ids = map(_ -> ID(), phi_ids)
      209     tmp = map(phi_ids, rdata_ids) do phi_id, deref_id
      276         P = get_primal_type(info, phi_id)
      276         r = get_rev_data_id(info, phi_id)
      276         return deref_and_zero_stmts(P, r, deref_id)
        -     end
      418     deref_stmts = reduce(vcat, tmp; init=IDInstPair[])
        - 
        -     # For each predecessor, create a `BBlock` which processes its corresponding edge in
        -     # each of the `PhiNode`s.
      209     new_blocks = map(pred_ids) do pred_id
      420         values = Any[__get_value(pred_id, p.stmt) for p in phis]
      420         return rvs_phi_block(pred_id, rdata_ids, values, info)
        -     end
      629     new_pred_ids = map(blk -> blk.id, new_blocks)
      209     switch = make_switch_stmts(pred_ids, new_pred_ids, pred_is_unique_pred, info)
      209     return vcat(deref_stmts, switch), new_blocks
        - end
        - 
        - """
        -     __get_value(edge::ID, x::IDPhiNode)
        - 
        - Helper functionality for conclude_rvs_block.
        - """
      554 function __get_value(edge::ID, x::IDPhiNode)
      606     edge in x.edges || return nothing
      502     n = only(findall(==(edge), x.edges))
      502     return isassigned(x.values, n) ? x.values[n] : nothing
        - end
        - 
        - """
        -     deref_and_zero_stmts(P, ref_id, val_id)
        - 
        - Equivalent to something like
        - ```julia
        - val = ref[]
        - ref[] = zero_rdata_from_type(P)
        - ```
        - """
      278 function deref_and_zero_stmts(P, ref_id, val_id)
      278     val = (val_id, new_inst(Expr(:call, getfield, ref_id, QuoteNode(:x))))
      278     r = Mooncake.zero_like_rdata_from_type(P)
      278     set_ref = (ID(), new_inst(Expr(:call, setfield!, ref_id, QuoteNode(:x), r)))
      278     return IDInstPair[val, set_ref]
        - end
        - 
        - """
        -     rvs_phi_block(pred_id::ID, rdata_ids::Vector{ID}, values::Vector{Any}, info::ADInfo)
        - 
        - Produces a `BBlock` which runs the reverse-pass for the edge associated to `pred_id` in a
        - collection of `IDPhiNode`s, and then goes to the block associated to `pred_id`.
        - 
        - For example, suppose that we encounter the following collection of `PhiNode`s at the start
        - of some block:
        - ```julia
        - %6 = Ï† (#2 => _1, #3 => %5)
        - %7 = Ï† (#2 => 5., #3 => _2)
        - ```
        - Let the rdata refs associated to `%6`, `%7`, and `_1`` be denoted `r%6`, `r%7`, and `r_1`
        - resp., and let `pred_id` be `#2`, and `increment_ref!` be the following function,
        - ```julia
        - increment_ref!(ref, x) = ref[] = increment!!(ref[], x)
        - ```
        - then this `rvs_phi_block` will produce a basic block of the form
        - ```julia
        - increment_ref!(r_1, r%6)
        - nothing
        - goto #2
        - ```
        - The call to `increment_ref!` appears because `_1` is the value associated to`%6` when the
        - primal code comes from `#2`. Similarly, the `goto #2` statement appears because we came from
        - `#2` on the forwards-pass. There is no `increment_ref!` associated to `%7` because `5.` is a
        - constant. We emit a `nothing` statement, which the compiler will happily optimise away later
        - on.
        - 
        - The same ideas apply if `pred_id` were `#3`. The block would end with `#3`, and there would
        - be two `increment_ref!` calls because both `%5` and `_2` are not constants.
        - 
        - In practice, code which is equivalent to `increment_ref!` is created directly, rather than
        - inserting a call to a generic Julia function. This is because we need to be certain that
        - the getfield and setfield! calls applied to any references are visible to the SROA
        - optimisation pass. If we insert a call to a function like `increment_ref!`, it might not be
        - inlined away, making such references opaque.
        - """
      420 function rvs_phi_block(
        -     pred_id::ID, rdata_ids::Vector{ID}, values::Vector{Any}, info::ADInfo
        - )
      420     @assert length(rdata_ids) == length(values)
      420     tmp = map(rdata_ids, values) do id, val
      554         rev_data_id = get_rev_data_id(info, val)
      554         rev_data_id === nothing && return nothing
      270         return increment_ref_stmts(rev_data_id, id)
        -     end
     1203     inc_stmts = reduce(vcat, filter(x -> !(x === nothing), tmp); init=IDInstPair[])
      420     goto_stmt = (ID(), new_inst(IDGotoNode(pred_id)))
      420     return BBlock(ID(), vcat(inc_stmts, goto_stmt))
        - end
        - 
        - """
        -     make_switch_stmts(
        -         pred_ids::Vector{ID}, target_ids::Vector{ID}, pred_is_unique_pred::Bool, info::ADInfo
        -     )
        - 
        - `preds_ids` comprises the `ID`s associated to all possible predecessor blocks to the primal
        - block under consideration. Suppose its value is `[ID(1), ID(2), ID(3)]`, then
        - `make_switch_stmts` emits code along the lines of
        - 
        - ```julia
        - prev_block = pop!(block_stack)
        - not_pred_was_1 = !(prev_block == ID(1))
        - not_pred_was_2 = !(prev_block == ID(2))
        - switch(
        -     not_pred_was_1 => ID(1),
        -     not_pred_was_2 => ID(2),
        -     ID(3)
        - )
        - ```
        - 
        - In words: `make_switch_stmts` emits code which jumps to whichever block preceded the current
        - block during the forwards-pass.
        - """
     3048 function make_switch_stmts(
        -     pred_ids::Vector{ID}, target_ids::Vector{ID}, pred_is_unique_pred::Bool, info::ADInfo
        - )
        -     # If there are no predecessors, then we can't possibly have hit this block. This can
        -     # happen when all of the statements in a block have been eliminated, but the Julia
        -     # optimiser has not removed the block entirely from the `IRCode`. This often presents as
        -     # a block containing only a single `nothing` statement.
        -     # Consequently, we just direct this block back towards the entry node. This is safe, as
        -     # this block will never get hit, and ensures that the block is safe under re-ordering.
     3048     isempty(pred_ids) && return [(ID(), new_inst(IDGotoNode(info.entry_id)))]
        - 
        -     # Get the predecessor that we actually had in the primal.
     3048     prev_blk_id = ID()
     3048     if pred_is_unique_pred
     2564         prev_blk = new_inst(QuoteNode(only(pred_ids)))
        -     else
      484         prev_blk = new_inst(Expr(:call, __pop_blk_stack!, info.block_stack_id))
        -     end
        - 
        -     # Compare predecessor from primal with all possible predecessors.
     3367     conds = map(pred_ids[1:(end - 1)]) do id
      569         return (ID(), new_inst(Expr(:call, __switch_case, id.id, prev_blk_id)))
        -     end
        - 
        -     # Switch statement to change to the predecessor.
     3048     switch_stmt = Switch(Any[c[1] for c in conds], target_ids[1:(end - 1)], target_ids[end])
     3048     switch = (ID(), new_inst(switch_stmt))
        - 
     3048     return vcat((prev_blk_id, prev_blk), conds, switch)
        - end
        - 
     2839 function make_switch_stmts(pred_ids::Vector{ID}, pred_is_unique_pred::Bool, info::ADInfo)
     2839     return make_switch_stmts(pred_ids, pred_ids, pred_is_unique_pred, info)
        - end
        - """
        -     __pop_blk_stack!(block_stack::BlockStack)
        - 
        - Equivalent to `pop!(block_stack)`. Going via this function, rather than just calling `pop!`
        - directly, makes it easy to figure out how much time is spent popping the block stack when
        - profiling performance, and to know that this function was hit when debugging.
        - """
     3625 @inline __pop_blk_stack!(block_stack::BlockStack) = pop!(block_stack)
        - 
        - """
        -     __switch_case(id::Int32, predecessor_id::Int32)
        - 
        - Helper function emitted by `make_switch_stmts`.
        - """
     3696 __switch_case(id::Int32, predecessor_id::Int32) = !(id === predecessor_id)
        - 
        - """
        -     DynamicDerivedRule(interp::MooncakeInterpreter, debug_mode::Bool)
        - 
        - For internal use only.
        - 
        - A callable data structure which, when invoked, calls an rrule specific to the dynamic types
        - of its arguments. Stores rules in an internal cache to avoid re-deriving.
        - 
        - This is used to implement dynamic dispatch.
        - """
        - struct DynamicDerivedRule{V}
     1338     cache::V
        -     debug_mode::Bool
        - end
        - 
      293 DynamicDerivedRule(debug_mode::Bool) = DynamicDerivedRule(Dict{Any,Any}(), debug_mode)
        - 
     1045 _copy(x::P) where {P<:DynamicDerivedRule} = P(Dict{Any,Any}(), x.debug_mode)
        - 
        0 function (dynamic_rule::DynamicDerivedRule)(args::Vararg{Any,N}) where {N}
        0     sig = Tuple{map(_typeof âˆ˜ primal, args)...}
        0     rule = get(dynamic_rule.cache, sig, nothing)
        0     if rule === nothing
        0         rule = build_rrule(get_interpreter(), sig; debug_mode=dynamic_rule.debug_mode)
        0         dynamic_rule.cache[sig] = rule
        -     end
        0     return rule(args...)
        - end
        - 
        - """
        -     LazyDerivedRule(interp, mi::Core.MethodInstance, debug_mode::Bool)
        - 
        - For internal use only.
        - 
        - A type-stable wrapper around a `DerivedRule`, which only instantiates the `DerivedRule`
        - when it is first called. This is useful, as it means that if a rule does not get run, it
        - does not have to be derived.
        - 
        - If `debug_mode` is `true`, then the rule constructed will be a `DebugRRule`. This is useful
        - when debugging, but should usually be switched off for production code as it (in general)
        - incurs some runtime overhead.
        - 
        - Note: the signature of the primal for which this is a rule is stored in the type. The only
        - reason to keep this around is for debugging -- it is very helpful to have this type visible
        - in the stack trace when something goes wrong, as it allows you to trivially determine which
        - bit of your code is the culprit.
        - 
        - # Extended Help
        - 
        - There are two main reasons why deferring the construction of a `DerivedRule` until we need
        - to use it is crucial.
        - 
        - The first is to do with recursion. Consider the following function:
        - ```julia
        - f(x) = x > 0 ? f(x - 1) : x
        - ```
        - If we generate the `IRCode` for this function, we will see something like the following:
        - ```julia
        - julia> Base.code_ircode_by_type(Tuple{typeof(f), Float64})[1][1]
        - 1 1 â”€ %1  = Base.lt_float(0.0, _2)::Bool
        -   â”‚   %2  = Base.or_int(%1, false)::Bool
        -   â””â”€â”€       goto #6 if not %2
        -   2 â”€ %4  = Base.sub_float(_2, 1.0)::Float64
        -   â”‚   %5  = Base.lt_float(0.0, %4)::Bool
        -   â”‚   %6  = Base.or_int(%5, false)::Bool
        -   â””â”€â”€       goto #4 if not %6
        -   3 â”€ %8  = Base.sub_float(%4, 1.0)::Float64
        -   â”‚   %9  = invoke Main.f(%8::Float64)::Float64
        -   â””â”€â”€       goto #5
        -   4 â”€       goto #5
        -   5 â”„ %12 = Ï† (#3 => %9, #4 => %4)::Float64
        -   â””â”€â”€       return %12
        -   6 â”€       return _2
        - ```
        - Suppose that we decide to construct a `DerivedRule` immediately whenever we find an
        - `:invoke` statement in a rule that we're currently building a `DerivedRule` for.
        - In the above example, we produce an infinite recursion when we attempt to produce a
        - `DerivedRule` for %9, because it has the same signature as the call which generates this IR.
        - By instead adopting a policy of constructing a `LazyDerivedRule` whenever we encounter an
        - `:invoke` statement, we avoid this problem.
        - 
        - The second reason that delaying the construction of a `DerivedRule`, is essential is that it
        - ensures that we don't derive rules for method instances which aren't run. Suppose that
        - function B contains code for which we can't derive a rule -- perhaps it contains an
        - unsupported language feature like a `PhiCNode` or an `UpsilonNode`. Suppose that function A
        - contains an `:invoke` which refers to function `B`, but that this call is on a branch which
        - deals with error handling, and doesn't get run run unless something goes wrong. By deferring
        - the derivation of the rule for B, we only ever attempt to derive it if we land on this
        - error handling branch. Conversely, if we attempted to derive the rule for B when we derive
        - the rule for A, we would be unable to complete the derivation of the rule for A.
        - """
        - mutable struct LazyDerivedRule{primal_sig,Trule}
        -     debug_mode::Bool
        -     mi::Core.MethodInstance
        -     rule::Trule
      185     function LazyDerivedRule(mi::Core.MethodInstance, debug_mode::Bool)
      185         interp = get_interpreter()
      185         return new{mi.specTypes,rule_type(interp, mi;debug_mode)}(debug_mode, mi)
        -     end
     1028     function LazyDerivedRule{Tprimal_sig,Trule}(
        -         mi::Core.MethodInstance, debug_mode::Bool
        -     ) where {Tprimal_sig,Trule}
     1028         return new{Tprimal_sig,Trule}(debug_mode, mi)
        -     end
        - end
        - 
     1028 _copy(x::P) where {P<:LazyDerivedRule} = P(x.mi, x.debug_mode)
        - 
      304 @inline function (rule::LazyDerivedRule)(args::Vararg{Any,N}) where {N}
      516     return isdefined(rule, :rule) ? rule.rule(args...) : _build_rule!(rule, args)
        - end
        - 
      212 @noinline function _build_rule!(rule::LazyDerivedRule{sig,Trule}, args) where {sig,Trule}
      212     rule.rule = build_rrule(get_interpreter(), rule.mi; debug_mode=rule.debug_mode)
      212     return rule.rule(args...)
        - end
        - 
        - """
        -     rule_type(interp::MooncakeInterpreter{C}, sig_or_mi; debug_mode) where {C}
        - 
        - Compute the concrete type of the rule that will be returned from `build_rrule`. This is
        - important for performance in dynamic dispatch, and to ensure that recursion works
        - properly.
        - """
      370 function rule_type(interp::MooncakeInterpreter{C}, sig_or_mi; debug_mode) where {C}
      185     if is_primitive(C, _get_sig(sig_or_mi))
        0         rule = build_primitive_rrule(_get_sig(sig_or_mi))
        0         return debug_mode ? DebugRRule{typeof(rule)} : typeof(rule)
        -     end
        - 
      185     ir, _ = lookup_ir(interp, sig_or_mi)
      185     Treturn = Base.Experimental.compute_ir_rettype(ir)
      185     isva, _ = is_vararg_and_sparam_names(sig_or_mi)
        - 
      185     arg_types = map(CC.widenconst, ir.argtypes)
      185     sig = Tuple{arg_types...}
      185     fwd_args_type = Tuple{map(fcodual_type, arg_types)...}
      185     fwd_return_type = forwards_ret_type(ir)
      185     Trdata_return = rdata_type(tangent_type(Treturn))
      369     pb_args_type = Trdata_return === Union{} ? Union{} : Tuple{Trdata_return}
      185     pb_return_type = pullback_ret_type(ir)
      185     nargs = Val{length(ir.argtypes)}
        - 
      185     Tderived_rule = DerivedRule{
        -         sig,fwd_args_type,fwd_return_type,pb_args_type,pb_return_type,isva,nargs
        -     }
      185     return debug_mode ? DebugRRule{Tderived_rule} : Tderived_rule
        - end
