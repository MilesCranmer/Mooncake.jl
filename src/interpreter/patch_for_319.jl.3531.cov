        - # The purpose of the code in this file is to provide a work-around for the Julia compiler
        - # bug discussed in https://github.com/chalk-lab/Mooncake.jl/issues/319 . You do not need to
        - # understand it in order to understand Mooncake. I (Will) would recommend against spending
        - # any time at all reading / understanding this file unless you are actively working on this
        - # issue, and find it useful.
        - #
        - # As soon as patch versions of Julia (both LTS and Release) are made which contain a fix for
        - # the bug underlying the above issue, this code can and should be removed, and the minimum
        - # versions of Julia which Mooncake supports bumped.
        - #
        - # The only place in which this code seeps into Mooncake.jl code is in Mooncake.optimise_ir!,
        - # located in src/interpreter/ir_utils.jl . In particular, we replace the `local_interp`
        - # variable with the `AbstractInterpreter`.
        - #
        - # The work around:
        - # We define a new `AbstractInterpreter` which wraps around the `Compiler.NativeInterpreter`.
        - # This makes it possible to add methods to various functions in `Compiler`, thereby enabling
        - # us to insert the bug fixes.
        - 
        - struct BugPatchInterpreter <: CC.AbstractInterpreter
        -     interp::CC.NativeInterpreter
       40     BugPatchInterpreter() = new(CC.NativeInterpreter())
        - end
        - 
   188721 CC.InferenceParams(ip::BugPatchInterpreter) = CC.InferenceParams(ip.interp)
   128364 CC.OptimizationParams(ip::BugPatchInterpreter) = CC.OptimizationParams(ip.interp)
    14500 CC.get_inference_cache(ip::BugPatchInterpreter) = CC.get_inference_cache(ip.interp)
    85785 CC.code_cache(ip::BugPatchInterpreter) = CC.code_cache(ip.interp)
        - function CC.get(wvc::CC.WorldView{BugPatchInterpreter}, mi::Core.MethodInstance, default)
        -     return get(wvc.cache.dict, mi, default)
        - end
        - function CC.getindex(wvc::CC.WorldView{BugPatchInterpreter}, mi::Core.MethodInstance)
        -     return getindex(wvc.cache.dict, mi)
        - end
        - function CC.haskey(wvc::CC.WorldView{BugPatchInterpreter}, mi::Core.MethodInstance)
        -     return haskey(wvc.cache.dict, mi)
        - end
        - function CC.setindex!(
        -     wvc::CC.WorldView{BugPatchInterpreter}, ci::Core.CodeInstance, mi::Core.MethodInstance
        - )
        -     return setindex!(wvc.cache.dict, ci, mi)
        - end
    34129 CC.method_table(ip::BugPatchInterpreter) = CC.method_table(ip.interp)
        - 
        - @static if VERSION < v"1.11.0"
        -     CC.get_world_counter(ip::BugPatchInterpreter) = CC.get_world_counter(ip.interp)
        - else
    16793     CC.get_inference_world(ip::BugPatchInterpreter) = CC.get_inference_world(ip.interp)
        -     CC.cache_owner(ip::BugPatchInterpreter) = CC.cache_owner(ip.interp)
        - end
        - 
        - # You can't write for n in thing_from_compiler unless `Base.iterate(thing_from_compiler)`
        - # is implemented. Sadly, it's usually the case that `Compiler.iterate(thing_from_compiler)`
        - # is implemented, but not the function from `Base.` This is convenience functionality to
        - # ensure that we don't have to write everything out manually each time iteration over
        - # something from the Compiler is encountered.
   253503 function core_iterate(f, iterator)
   444706     it = CC.iterate(iterator)
   721443     while it !== nothing
    56995         val, state = it
   440425         f(val)
   690563         it = CC.iterate(iterator, state)
   440425     end
        - end
        - 
        - @static if VERSION >= v"1.11"
        - 
        -     # Original contains bugs. Apply patch from Jules Merck.
        0     function patched_populate_def_use_map!(
        -         tpdum::CC.TwoPhaseDefUseMap, scanner::CC.BBScanner
        -     )
       27         CC.scan!(scanner, false) do inst::CC.Instruction, lstmt::Int, bb::Int
    55359             core_iterate(CC.userefs(inst[:stmt])) do ur # replace inst with inst[:stmt]
   119534                 val = CC.getindex(ur)
   119534                 if isa(val, SSAValue)
    33706                     CC.push!(CC.getindex(tpdum, val.id), inst.idx)
        -                 end
        -             end
    50485             return true
        -         end
        -     end
        - 
        -     # Calls populate_def_use_map! -- see above.
      864     function CC._ir_abstract_constant_propagation(
        -         interp::BugPatchInterpreter,
        -         irsv::CC.IRInterpretationState;
        -         externally_refined::Union{Nothing,BitSet}=nothing,
        -     )
      432         (; ir, tpdum, ssa_refined) = irsv
        - 
      432         @assert CC.isempty(ir.new_nodes) "IRCode should be compacted before irinterp"
        - 
      432         all_rets = Int[]
      432         scanner = CC.BBScanner(ir)
        - 
    22389         function check_ret!(@nospecialize(stmt), idx::Int)
    53847             return isa(stmt, ReturnNode) && isdefined(stmt, :val) && push!(all_rets, idx)
        -         end
        - 
        -         # Fast path: Scan both use counts and refinement in one single pass of
        -         #            of the instructions. In the absence of backedges, this will
        -         #            converge.
      432         completed_scan =
        -             CC.scan!(scanner, true) do inst::CC.Instruction, lstmt::Int, bb::Int
    31804                 idx = inst.idx
    31804                 irsv.curridx = idx
    31804                 stmt = inst[:stmt]
    31804                 typ = inst[:type]
    31804                 flag = inst[:flag]
    31804                 any_refined = false
    31804                 if CC.has_flag(flag, CC.IR_FLAG_REFINED)
    30383                     any_refined = true
    30383                     CC.sub_flag!(inst, CC.IR_FLAG_REFINED)
     1421                 elseif CC.is_all_const_call(stmt, interp, irsv)
        -                     # force reinference on calls with all constant arguments
       59                     any_refined = true
        -                 end
    34073                 core_iterate(CC.userefs(stmt)) do ur
    73134                     val = CC.getindex(ur)
    73134                     if isa(val, Argument)
     3065                         any_refined |= irsv.argtypes_refined[val.n]
    70069                     elseif isa(val, SSAValue)
    14761                         any_refined |= CC.in(val.id, ssa_refined)
    14761                         CC.count!(tpdum, val)
        -                     end
        -                 end
    31804                 if isa(stmt, CC.PhiNode) && CC.in(idx, ssa_refined)
        1                     any_refined = true
        2                     CC.delete!(ssa_refined, idx)
        -                 end
    31805                 check_ret!(stmt, idx)
    63500                 is_terminator_or_phi = (isa(stmt, PhiNode) || CC.isterminator(stmt))
    31804                 if typ === CC.Bottom && !(idx == lstmt && is_terminator_or_phi)
        1                     return true
        -                 end
    33837                 if (
        -                     any_refined && CC.reprocess_instruction!(interp, inst, idx, bb, irsv)
        -                 ) || (externally_refined !== nothing && idx in externally_refined)
    29769                     CC.push!(ssa_refined, idx)
    29769                     stmt = inst[:stmt]
    29769                     typ = inst[:type]
        -                 end
    31803                 if typ === CC.Bottom && !is_terminator_or_phi
       57                     CC.kill_terminator_edges!(irsv, lstmt, bb)
       57                     if idx != lstmt
       57                         for idx2 in ((idx + 1):(lstmt - 1))
      342                             CC.setindex!(ir, nothing, SSAValue(idx2))
      627                         end
       57                         CC.setindex!(ir[SSAValue(lstmt)], ReturnNode(), :stmt)
        -                     end
       57                     return false
        -                 end
    31746                 return true
        -             end
        - 
      432         if !completed_scan
        -             # Slow path
       27             stmt_ip = CC.BitSetBoundedMinPrioritySet(length(ir.stmts))
        - 
        -             # Slow Path Phase 1.A: Complete use scanning
       27             CC.scan!(scanner, false) do inst::CC.Instruction, lstmt::Int, bb::Int
    21957                 idx = inst.idx
    21957                 irsv.curridx = idx
    21957                 stmt = inst[:stmt]
    21957                 flag = inst[:flag]
    21957                 if CC.has_flag(flag, CC.IR_FLAG_REFINED)
    21906                     CC.sub_flag!(inst, CC.IR_FLAG_REFINED)
    21906                     CC.push!(stmt_ip, idx)
        -                 end
    22042                 check_ret!(stmt, idx)
    24064                 core_iterate(CC.userefs(stmt)) do ur
    56995                     val = CC.getindex(ur)
    56995                     if isa(val, Argument)
      287                         if irsv.argtypes_refined[val.n]
        0                             CC.push!(stmt_ip, idx)
        -                         end
    56708                     elseif isa(val, SSAValue)
    22229                         CC.count!(tpdum, val)
        -                     end
        -                 end
    21957                 return true
        -             end
        - 
        -             # Slow Path Phase 1.B: Assemble def-use map
       27             CC.complete!(tpdum)
       27             CC.push!(scanner.bb_ip, 1)
       27             patched_populate_def_use_map!(tpdum, scanner)
        - 
        -             # Slow Path Phase 2: Use def-use map to converge cycles.
        -             # TODO: It would be possible to return to the fast path after converging
        -             #       each cycle, but that's somewhat complicated.
       27             core_iterate(ssa_refined) do val
        -                 # for use in CC.getindex(tpdum, val)
    27515                 core_iterate(CC.getindex(tpdum, val)) do use
    16880                     if !CC.in(use, ssa_refined)
     6315                         CC.push!(stmt_ip, use)
        -                     end
        -                 end
        -             end
    47417             while !CC.isempty(stmt_ip)
    23695                 idx = CC.popfirst!(stmt_ip)
    23695                 irsv.curridx = idx
    23695                 inst = ir[SSAValue(idx)]
    23695                 if CC.reprocess_instruction!(interp, inst, idx, nothing, irsv)
    22290                     CC.append!(stmt_ip, CC.getindex(tpdum, idx))
        -                 end
    23695             end
        -         end
        - 
        0         ultimate_rt = CC.Bottom
      432         for idx in all_rets
      592             bb = CC.block_for_inst(ir.cfg, idx)
      592             if bb != 1 && length(ir.cfg.blocks[bb].preds) == 0
        -                 # Could have discovered this block is dead after the initial scan
        0                 continue
        -             end
      592             inst = ir[SSAValue(idx)][:stmt]::ReturnNode
      592             rt = CC.argextype(inst.val, ir)
      592             ultimate_rt = CC.tmerge(CC.typeinf_lattice(interp), ultimate_rt, rt)
      592         end
        - 
      432         nothrow = noub = true
      432         for idx in 1:length(ir.stmts)
    18122             if ir[SSAValue(idx)][:stmt] === nothing
        -                 # skip `nothing` statement, which might be inserted as a dummy node,
        -                 # e.g. by `finish_current_bb!` without explicitly marking it as `:nothrow`
        6                 continue
        -             end
    18116             flag = ir[SSAValue(idx)][:flag]
    18116             nothrow &= CC.has_flag(flag, CC.IR_FLAG_NOTHROW)
    18116             noub &= CC.has_flag(flag, CC.IR_FLAG_NOUB)
    18116             (nothrow | noub) || break
    35768         end
        - 
      432         if CC.last(irsv.valid_worlds) >= CC.get_world_counter()
        -             # if we aren't cached, we don't need this edge
        -             # but our caller might, so let's just make it anyways
      432             CC.store_backedges(CC.frame_instance(irsv), irsv.edges)
        -         end
        - 
      432         return Pair{Any,Tuple{Bool,Bool}}(
        -             CC.maybe_singleton_const(ultimate_rt), (nothrow, noub)
        -         )
        -     end
        - 
        -     struct ScanStmtPatch
     7869         sv::CC.PostOptAnalysisState
        -     end
        - 
        -     # Original contains bugs.
   153688     function ((; sv)::ScanStmtPatch)(inst::CC.Instruction, lstmt::Int, bb::Int)
   153688         stmt = inst[:stmt]
        - 
   153688         if isa(stmt, CC.EnterNode)
        -             # try/catch not yet modeled
        0             CC.give_up_refinements!(sv)
        0             return true # don't bail out early -- replaces `nothing` with `true` 
        -         end
        - 
   153688         CC.scan_non_dataflow_flags!(inst, sv)
        - 
   153688         stmt_inconsistent = patched_scan_inconsistency!(inst, sv)
        - 
   153688         if stmt_inconsistent
   123525             if !CC.has_flag(inst[:flag], CC.IR_FLAG_NOTHROW)
        -                 # Taint :consistent if this statement may raise since :consistent requires
        -                 # consistent termination. TODO: Separate :consistent_return and :consistent_termination from :consistent.
    83187                 sv.all_retpaths_consistent = false
        -             end
   123525             if inst.idx == lstmt
     8988                 if isa(stmt, ReturnNode) && isdefined(stmt, :val)
     1347                     sv.all_retpaths_consistent = false
     7641                 elseif isa(stmt, GotoIfNot)
        -                     # Conditional Branch with inconsistent condition.
        -                     # If we do not know this function terminates, taint consistency, now,
        -                     # :consistent requires consistent termination. TODO: Just look at the
        -                     # inconsistent region.
     4748                     if !sv.result.ipo_effects.terminates
     1191                         sv.all_retpaths_consistent = false
     3557                     elseif CC.visit_conditional_successors(
        -                         sv.lazypostdomtree, sv.ir, bb
        -                     ) do succ::Int
    23518                         return CC.any_stmt_may_throw(sv.ir, succ)
        -                     end
        -                         # check if this `GotoIfNot` leads to conditional throws, which taints consistency
     3552                         sv.all_retpaths_consistent = false
        -                     else
        5                         (; cfg, domtree) = CC.get!(sv.lazyagdomtree)
        5                         for succ in CC.iterated_dominance_frontier(
        -                             cfg,
        -                             CC.BlockLiveness(sv.ir.cfg.blocks[bb].succs, nothing),
        -                             domtree,
        -                         )
       11                             if succ == CC.length(cfg.blocks)
        -                                 # Phi node in the virtual exit -> We have a conditional
        -                                 # return. TODO: Check if all the retvals are egal.
        2                                 sv.all_retpaths_consistent = false
        -                             else
        9                                 CC.visit_bb_phis!(sv.ir, succ) do phiidx::Int
       11                                     CC.push!(sv.inconsistent, phiidx)
        -                                 end
        -                             end
       11                         end
        -                     end
        -                 end
        -             end
        -         end
        - 
        -         # Do not bail out early, as this can cause tpdum counts to be off.
        -         # # bail out early if there are no possibilities to refine the effects
        -         # if !any_refinable(sv)
        -         #     return nothing
        -         # end
        - 
   153688         return true
        -     end
        - 
        -     # Original contains bug.
   153688     function patched_scan_inconsistency!(inst::CC.Instruction, sv::CC.PostOptAnalysisState)
   153688         flag = inst[:flag]
   153688         stmt_inconsistent = !CC.has_flag(flag, CC.IR_FLAG_CONSISTENT)
   153688         stmt = inst[:stmt]
        -         # Special case: For `getfield` and memory operations, we allow inconsistency of the :boundscheck argument
   153688         (; inconsistent, tpdum) = sv
   194469         if CC.iscall_with_boundscheck(stmt, sv)
     4458             for i in 1:length(stmt.args) # explore all args -- don't assume boundscheck is not an SSA
    17834                 val = stmt.args[i]
    17834                 if isa(val, SSAValue)
     8677                     stmt_inconsistent |= CC.in(val.id, inconsistent)
     8677                     CC.count!(tpdum, val)
        -                 end
    31210             end
        -         else
   149230             core_iterate(CC.userefs(stmt)) do ur
   146367                 val = CC.getindex(ur)
   146367                 if isa(val, SSAValue)
    50518                     stmt_inconsistent |= CC.in(val.id, inconsistent)
    50518                     CC.count!(tpdum, val)
        -                 end
        -             end
        -         end
   153688         stmt_inconsistent && CC.push!(inconsistent, inst.idx)
   153688         return stmt_inconsistent
        -     end
        - 
        -     # Calls check_inconsistentcy! -- see below.
     7949     function CC.ipo_dataflow_analysis!(
        -         interp::BugPatchInterpreter, ir::CC.IRCode, result::CC.InferenceResult
        -     )
     7949         if !CC.is_ipo_dataflow_analysis_profitable(result.ipo_effects)
       80             return false
        -         end
        - 
     7869         @assert CC.isempty(ir.new_nodes) "IRCode should be compacted before post-opt analysis"
        - 
     7869         sv = CC.PostOptAnalysisState(result, ir)
     7869         scanner = CC.BBScanner(ir)
        - 
     7869         completed_scan = CC.scan!(ScanStmtPatch(sv), scanner, true)
        - 
     7869         if !completed_scan
       70             if sv.all_retpaths_consistent
        0                 patched_check_inconsistentcy!(sv, scanner)
        -             else
        -                 # No longer any dataflow concerns, just scan the flags
       70                 CC.scan!(scanner, false) do inst::CC.Instruction, lstmt::Int, bb::Int
      131                     CC.scan_non_dataflow_flags!(inst, sv)
        -                     # bail out early if there are no possibilities to refine the effects
      131                     if !CC.any_refinable(sv)
       70                         return nothing
        -                     end
       61                     return true
        -                 end
        -             end
        -         end
        - 
     7869         return CC.refine_effects!(interp, sv)
        -     end
        - 
        -     # Calls populate_def_use_map! -- see above.
        0     function patched_check_inconsistentcy!(
        -         sv::CC.PostOptAnalysisState, scanner::CC.BBScanner
        -     )
        0         (; ir, inconsistent, tpdum) = sv
        - 
        0         CC.scan!(ScanStmtPatch(sv), scanner, false)
        0         CC.complete!(tpdum)
        0         CC.push!(scanner.bb_ip, 1)
        0         patched_populate_def_use_map!(tpdum, scanner)
        - 
        0         stmt_ip = CC.BitSetBoundedMinPrioritySet(length(ir.stmts))
        0         core_iterate(inconsistent) do def
        0             core_iterate(CC.getindex(tpdum, def)) do use
        0                 if !CC.in(use, inconsistent)
        0                     CC.push!(inconsistent, use)
        0                     CC.append!(stmt_ip, CC.getindex(tpdum, use))
        -                 end
        -             end
        -         end
        0         lazydomtree = CC.LazyDomtree(ir)
        0         while !CC.isempty(stmt_ip)
        0             idx = CC.popfirst!(stmt_ip)
        0             inst = ir[SSAValue(idx)]
        0             stmt = inst[:stmt]
        0             if CC.iscall_with_boundscheck(stmt, sv)
        0                 any_non_boundscheck_inconsistent = false
        0                 for i in 1:(length(stmt.args) - 1)
        0                     val = stmt.args[i]
        0                     if isa(val, SSAValue)
        0                         any_non_boundscheck_inconsistent |= val.id in inconsistent
        0                         any_non_boundscheck_inconsistent && break
        -                     end
        0                 end
        0                 any_non_boundscheck_inconsistent || continue
        0             elseif isa(stmt, ReturnNode)
        0                 sv.all_retpaths_consistent = false
        0             elseif isa(stmt, GotoIfNot)
        0                 bb = CC.block_for_inst(ir, idx)
        0                 cfg = ir.cfg
        0                 blockliveness = CC.BlockLiveness(cfg.blocks[bb].succs, nothing)
        0                 for succ in
        -                     CC.iterated_dominance_frontier(cfg, blockliveness, get!(lazydomtree))
        0                     CC.visit_bb_phis!(ir, succ) do phiidx::Int
        -                         push!(inconsistent, phiidx)
        -                         push!(stmt_ip, phiidx)
        -                     end
        0                 end
        -             end
        0             sv.all_retpaths_consistent || break
        0             CC.append!(inconsistent, tpdum[idx])
        0             CC.append!(stmt_ip, tpdum[idx])
        0         end
        -     end
        - end
