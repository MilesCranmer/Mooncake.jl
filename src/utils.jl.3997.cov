        - """
        -     _typeof(x)
        - 
        - Central definition of typeof, which is specific to the use-required in this package.
        - """
    41460 _typeof(x) = Base._stable_typeof(x)
      109 _typeof(x::Tuple) = Tuple{tuple_map(_typeof, x)...}
        - _typeof(x::NamedTuple{names}) where {names} = NamedTuple{names,_typeof(Tuple(x))}
        - 
        - """
        -     tuple_map(f::F, x::Tuple) where {F}
        - 
        - This function is largely equivalent to `map(f, x)`, but always specialises on all of
        - the element types of `x`, regardless the length of `x`. This contrasts with `map`, in which
        - the number of element types specialised upon is a fixed constant in the compiler.
        - 
        - As a consequence, if `x` is very long, this function may have very large compile times.
        - 
        -     tuple_map(f::F, x::Tuple, y::Tuple) where {F}
        - 
        - Binary extension of `tuple_map`. Nearly equivalent to `map(f, x, y)`, but guaranteed to
        - specialise on all element types of `x` and `y`. Furthermore, errors if `x` and `y` aren't
        - the same length, while `map` will just produce a new tuple whose length is equal to the
        - shorter of `x` and `y`.
        - """
        0 @inline @generated function tuple_map(f::F, x::Tuple) where {F}
     2019     return Expr(:call, :tuple, map(n -> :(f(getfield(x, $n))), 1:fieldcount(x))...)
        - end
        - 
        0 @inline @generated function tuple_map(f::F, x::Tuple, y::Tuple) where {F}
       72     if length(x.parameters) != length(y.parameters)
        0         return :(throw(ArgumentError("length(x) != length(y)")))
        -     else
      398         stmts = map(n -> :(f(getfield(x, $n), getfield(y, $n))), 1:fieldcount(x))
       72         return Expr(:call, :tuple, stmts...)
        -     end
        - end
        - 
      705 @generated function tuple_map(f, x::NamedTuple{names}) where {names}
       30     getfield_exprs = map(n -> :(f(getfield(x, $n))), 1:fieldcount(x))
       12     return :(NamedTuple{names}($(Expr(:call, :tuple, getfield_exprs...))))
        - end
        - 
        - @generated function tuple_map(f, x::NamedTuple{names}, y::NamedTuple{names}) where {names}
        -     if fieldcount(x) != fieldcount(y)
        -         return :(throw(ArgumentError("length(x) != length(y)")))
        -     end
        -     getfield_exprs = map(n -> :(f(getfield(x, $n), getfield(y, $n))), 1:fieldcount(x))
        -     return :(NamedTuple{names}($(Expr(:call, :tuple, getfield_exprs...))))
        - end
        - 
        - for N in 1:256
        -     @eval @inline function tuple_splat(f, x::Tuple{Vararg{Any,$N}})
        -         return $(Expr(:call, :f, map(n -> :(getfield(x, $n)), 1:N)...))
        -     end
        - end
        - 
        - @inline @generated function tuple_splat(f, x::Tuple)
        -     return Expr(:call, :f, map(n -> :(x[$n]), 1:length(x.parameters))...)
        - end
        - 
        - @inline @generated function tuple_splat(f, v, x::Tuple)
        -     return Expr(:call, :f, :v, map(n -> :(x[$n]), 1:length(x.parameters))...)
        - end
        - 
        0 @inline @generated function tuple_fill(val, ::Val{N}) where {N}
        2     return Expr(:call, :tuple, map(_ -> :val, 1:N)...)
        - end
        - 
        - """
        -     _findall(cond, x::Tuple)
        - 
        - Type-stable version of `findall` for `Tuple`s. Should constant-fold if `cond` can be
        - determined from the type of `x`.
        - """
        0 @inline @generated function _findall(cond, x::Tuple)
        - 
        -     # Initially we have found nothing.
        5     y = :(y = ())
        - 
        -     # For each element in `x`, if it satisfies `cond`, insert its index into `y`.
       20     exprs = map(n -> :(y = cond(x[$n]) ? ($n, y...) : y), 1:fieldcount(x))
        - 
        -     # Combine all expressions into a single block and return.
        5     return Expr(:block, y, exprs...)
        - end
        - 
        - """
        -     stable_all(x::NTuple{N, Bool}) where {N}
        - 
        - `all(x::NTuple{N, Bool})` does not constant-fold nicely on 1.10 if the values of `x` are
        - known statically. This implementation constant-folds nicely on both 1.10 and 1.11, so can
        - be used in its place in situations where this is important.
        - """
     8909 @generated function stable_all(x::NTuple{N,Bool}) where {N}
        - 
        -     # For each element in `x`, if it is `false`, return `false`.
       77     exprs = map(n -> :(x[$n] || return false), 1:N)
        - 
        -     # I've we've not found any false elements, return `true`.
       26     return Expr(:block, exprs..., :(return true))
        - end
        - 
        - """
        -     _map_if_assigned!(f, y::DenseArray, x::DenseArray{P}) where {P}
        - 
        - For all `n`, if `x[n]` is assigned, then writes the value returned by `f(x[n])` to `y[n]`,
        - otherwise leaves `y[n]` unchanged.
        - 
        - Equivalent to `map!(f, y, x)` if `P` is a bits type as element will always be assigned.
        - 
        - Requires that `y` and `x` have the same size.
        - """
      111 function _map_if_assigned!(f::F, y::DenseArray, x::DenseArray{P}) where {F,P}
      111     @assert size(y) == size(x)
      111     @inbounds for n in eachindex(y)
     7020         if isbitstype(P) || isassigned(x, n)
     7027             y[n] = f(x[n])
        -         end
    13929     end
      111     return y
        - end
        - 
        - """
        -     _map_if_assigned!(f::F, y::DenseArray, x1::DenseArray{P}, x2::DenseArray)
        - 
        - Similar to the other method of `_map_if_assigned!` -- for all `n`, if `x1[n]` is assigned,
        - writes `f(x1[n], x2[n])` to `y[n]`, otherwise leaves `y[n]` unchanged.
        - 
        - Requires that `y`, `x1`, and `x2` have the same size.
        - """
       68 function _map_if_assigned!(
        -     f::F, y::DenseArray, x1::DenseArray{P}, x2::DenseArray
        - ) where {F,P}
       68     @assert size(y) == size(x1)
       68     @assert size(y) == size(x2)
       68     @inbounds for n in eachindex(y)
     4080         if isbitstype(P) || isassigned(x1, n)
     4080             y[n] = f(x1[n], x2[n])
        -         end
     8092     end
       68     return y
        - end
        - 
        - """
        -     _map(f, x...)
        - 
        - Same as `map` but requires all elements of `x` to have equal length.
        - The usual function `map` doesn't enforce this for `Array`s.
        - """
      170 @inline function _map(f::F, x::Vararg{Any,N}) where {F,N}
      170     @assert allequal(map(length, x))
      170     return map(f, x...)
        - end
        - 
        - """
        -     is_vararg_and_sparam_names(m::Method)
        - 
        - Returns a 2-tuple. The first element is true if `m` is a vararg method, and false if not.
        - The second element contains the names of the static parameters associated to `m`.
        - """
      224 is_vararg_and_sparam_names(m::Method) = m.isva, sparam_names(m)
        - 
        - """
        -     is_vararg_and_sparam_names(sig)::Tuple{Bool, Vector{Symbol}}
        - 
        - Finds the method associated to `sig`, and calls `is_vararg_and_sparam_names` on it.
        - """
        3 function is_vararg_and_sparam_names(sig)::Tuple{Bool,Vector{Symbol}}
        3     world = Base.get_world_counter()
        3     min = Base.RefValue{UInt}(typemin(UInt))
        3     max = Base.RefValue{UInt}(typemax(UInt))
        3     ms = Base._methods_by_ftype(
        -         sig, nothing, -1, world, true, min, max, Ptr{Int32}(C_NULL)
        -     )::Vector
        3     return is_vararg_and_sparam_names(only(ms).method)
        - end
        - 
        - """
        -     is_vararg_and_sparam_names(mi::Core.MethodInstance)
        - 
        - Calls `is_vararg_and_sparam_names` on `mi.def::Method`.
        - """
      221 function is_vararg_and_sparam_names(mi::Core.MethodInstance)::Tuple{Bool,Vector{Symbol}}
      221     return is_vararg_and_sparam_names(mi.def)
        - end
        - 
        - """
        -     sparam_names(m::Core.Method)::Vector{Symbol}
        - 
        - Returns the names of all of the static parameters in `m`.
        - """
      224 function sparam_names(m::Core.Method)::Vector{Symbol}
      247     whereparams = ExprTools.where_parameters(m.sig)
      224     whereparams === nothing && return Symbol[]
      201     return map(whereparams) do name
      407         name isa Symbol && return name
       22         Meta.isexpr(name, :(<:)) && return name.args[1]
        0         Meta.isexpr(name, :(>:)) && return name.args[1]
        0         error("unrecognised type param $name")
        -     end
        - end
        - 
        - """
        -     always_initialised(::Type{P}) where {P}
        - 
        - Returns a tuple with number of fields equal to the number of fields in `P`. The nth field
        - is set to `true` if the nth field of `P` is initialised, and `false` otherwise.
        - """
      433 @generated function always_initialised(::Type{P}) where {P}
      143     P isa DataType || return :(error("$P is not a DataType."))
      143     num_init = CC.datatype_min_ninitialized(P)
      227     return (map(n -> n <= num_init, 1:fieldcount(P))...,)
        - end
        - 
        - """
        -     is_always_initialised(P::DataType, n::Int)::Bool
        - 
        - True if the `n`th field of `P` is always initialised. If the `n`th fieldtype of `P`
        - `isbitstype`, then this is distinct from asking whether the `n`th field is always defined.
        - An isbits field is always defined, but is not always explicitly initialised.
        - """
       74 function is_always_initialised(P::DataType, n::Int)::Bool
       74     return n <= CC.datatype_min_ninitialized(P)
        - end
        - 
        - """
        -     is_always_fully_initialised(P::DataType)::Bool
        - 
        - True if all fields in `P` are always initialised. Put differently, there are no inner
        - constructors which permit partial initialisation.
        - """
        - function is_always_fully_initialised(P::DataType)::Bool
        -     return CC.datatype_min_ninitialized(P) == fieldcount(P)
        - end
        - 
        - """
        -     lgetfield(x, ::Val{f}, ::Val{order}) where {f, order}
        - 
        - Like `getfield`, but with the field and access order encoded as types.
        - """
        - lgetfield(x, ::Val{f}, ::Val{order}) where {f,order} = getfield(x, f, order)
        - 
        - """
        -     lsetfield!(value, name::Val, x, [order::Val])
        - 
        - This function is to `setfield!` what `lgetfield` is to `getfield`. It will always hold that
        - ```julia
        - setfield!(copy(x), :f, v) == lsetfield!(copy(x), Val(:f), v)
        - setfield!(copy(x), 2, v) == lsetfield(copy(x), Val(2), v)
        - ```
        - """
        - lsetfield!(value, ::Val{name}, x) where {name} = setfield!(value, name, x)
        - 
        - """
        -     _new_(::Type{T}, x::Vararg{Any, N}) where {T, N}
        - 
        - One-liner which calls the `:new` instruction with type `T` with arguments `x`.
        - """
        0 @inline @generated function _new_(::Type{T}, x::Vararg{Any,N}) where {T,N}
      154     return Expr(:new, :T, map(n -> :(x[$n]), 1:N)...)
        - end
        - 
        - """
        -     flat_product(xs...)
        - 
        - Equivalent to `vec(collect(Iterators.product(xs...)))`.
        - """
        - flat_product(xs...) = vec(collect(Iterators.product(xs...)))
        - 
        - """
        -     map_prod(f, xs...)
        - 
        - Equivalent to `map(f, flat_product(xs...))`.
        - """
        - map_prod(f, xs...) = map(f, flat_product(xs...))
        - 
        - """
        -     opaque_closure(
        -         ret_type::Type,
        -         ir::IRCode,
        -         @nospecialize env...;
        -         isva::Bool=false,
        -         do_compile::Bool=true,
        -     )::Core.OpaqueClosure{<:Tuple, ret_type}
        - 
        - Construct a `Core.OpaqueClosure`. Almost equivalent to
        - `Core.OpaqueClosure(ir, env...; isva, do_compile)`, but instead of letting
        - `Core.compute_oc_rettype` figure out the return type from `ir`, impose `ret_type` as the
        - return type.
        - 
        - # Warning
        - 
        - User beware: if the `Core.OpaqueClosure` produced by this function ever returns anything
        - which is not an instance of a subtype of `ret_type`, you should expect all kinds of awful
        - things to happen, such as segfaults. You have been warned!
        - 
        - # Extended Help
        - 
        - This is needed in Mooncake.jl because make extensive use of our ability to know the return
        - type of a couple of specific `OpaqueClosure`s without actually having constructed them --
        - see `LazyDerivedRule`. Without the capability to specify the return type, we have to guess
        - what type `compute_ir_rettype` will return for a given `IRCode` before we have constructed
        - the `IRCode` and run type inference on it. This exposes us to details of type inference,
        - which are not part of the public interface of the language, and can therefore vary from
        - Julia version to Julia version (including patch versions). Moreover, even for a fixed Julia
        - version it can be extremely hard to predict exactly what type inference will infer to be the
        - return type of a function.
        - 
        - Failing to correctly guess the return type can happen for a number of reasons, and the kinds
        - of errors that tend to be generated when this fails tell you very little about the
        - underlying cause of the problem.
        - 
        - By specifying the return type ourselves, we remove this dependence. The price we pay for
        - this is the potential for segfaults etc if we fail to specify `ret_type` correctly.
        - """
      156 function opaque_closure(
        -     ret_type::Type,
        -     ir::IRCode,
        -     @nospecialize env...;
        -     isva::Bool=false,
        -     do_compile::Bool=true,
        - )
        -     # This implementation is copied over directly from `Core.OpaqueClosure`.
       78     ir = CC.copy(ir)
       78     nargs = length(ir.argtypes) - 1
       78     sig = Base.Experimental.compute_oc_signature(ir, nargs, isva)
       78     src = ccall(:jl_new_code_info_uninit, Ref{CC.CodeInfo}, ())
      301     src.slotnames = fill(:none, nargs + 1)
      156     src.slotflags = fill(zero(UInt8), length(ir.argtypes))
       78     src.slottypes = copy(ir.argtypes)
       78     src.rettype = ret_type
       78     src = CC.ir_to_codeinf!(src, ir)
       78     return Base.Experimental.generate_opaque_closure(
        -         sig, Union{}, ret_type, src, nargs, isva, env...; do_compile
        -     )::Core.OpaqueClosure{sig,ret_type}
        - end
        - 
        - """
        -     misty_closure(
        -         ret_type::Type,
        -         ir::IRCode,
        -         @nospecialize env...;
        -         isva::Bool=false,
        -         do_compile::Bool=true,
        -     )
        - 
        - Identical to [`Mooncake.opaque_closure`](@ref), but returns a `MistyClosure` closure rather
        - than a `Core.OpaqueClosure`.
        - """
      156 function misty_closure(
        -     ret_type::Type,
        -     ir::IRCode,
        -     @nospecialize env...;
        -     isva::Bool=false,
        -     do_compile::Bool=true,
        - )
       78     return MistyClosure(opaque_closure(ret_type, ir, env...; isva, do_compile), Ref(ir))
        - end
