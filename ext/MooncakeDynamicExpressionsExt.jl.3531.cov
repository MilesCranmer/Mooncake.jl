        - module MooncakeDynamicExpressionsExt
        - 
        - using DynamicExpressions:
        -     DynamicExpressions as DE,
        -     AbstractExpressionNode,
        -     Nullable,
        -     constructorof,
        -     branch_copy,
        -     leaf_copy,
        -     get_child,
        -     get_children,
        -     set_children!
        - using Mooncake
        - using Mooncake: NoTangent
        - using Random: AbstractRNG
        - 
        - ################################################################################
        - # Main tangent type
        - ################################################################################
        - 
        - mutable struct TangentNode{Tv,D}
       99     const degree::UInt8
        -     val::Union{Tv,NoTangent}
        -     children::NTuple{D,Union{@NamedTuple{null::NoTangent,x::TangentNode{Tv,D}},NoTangent}}
        - end
        - 
       99 function TangentNode{Tv,D}(
        -     val_tan::Union{Tv,NoTangent}, children::Vararg{Union{TangentNode{Tv,D},NoTangent},deg}
        - ) where {Tv,D,deg}
       99     return TangentNode{Tv,D}(
        -         UInt8(deg),
        -         val_tan,
      198         ntuple(i -> i <= deg ? _wrap_nullable(children[i]) : NoTangent(), Val(D)),
        -     )
        - end
        - 
     1514 function Mooncake.tangent_type(::Type{<:AbstractExpressionNode{T,D}}) where {T,D}
     1514     Tv = Mooncake.tangent_type(T)
     1514     return Tv === NoTangent ? NoTangent : TangentNode{Tv,D}
        - end
        - function Mooncake.tangent_type(::Type{TangentNode{Tv,D}}) where {Tv,D}
        -     return TangentNode{Tv,D}
        - end
        - function Mooncake.tangent_type(
        -     ::Type{TangentNode{Tv,D}}, ::Type{Mooncake.NoRData}
        - ) where {Tv,D}
        -     return TangentNode{Tv,D}
        - end
        2 function Mooncake.tangent(t::TangentNode, ::Mooncake.NoRData)
        2     return t
        - end
        - function Mooncake.rdata(::TangentNode)
        -     return Mooncake.NoRData()
        - end
        - 
        0 _unwrap_nullable(c::NoTangent) = c
        9 _unwrap_nullable(c::NamedTuple{(:null, :x)}) = c.x
        - _wrap_nullable(c::NoTangent) = c
       84 _wrap_nullable(c::TangentNode) = (; null=NoTangent(), x=c)
        - 
        9 function DE.get_child(t::TangentNode, i::Int)
       18     return _unwrap_nullable(t.children[i])
        - end
        9 function _get_child(t, ::Val{i}) where {i}
       18     return get_child(t, i)
        - end
        - function DE.get_children(t::TangentNode, ::Val{d}) where {d}
        -     return ntuple(i -> _unwrap_nullable(t.children[i]), Val(d))
        - end
        5 function DE.set_children!(
        -     t::TangentNode{Tv,D},
        -     children::Tuple{
        -         Union{TangentNode{Tv,D},NoTangent},
        -         Vararg{Union{TangentNode{Tv,D},NoTangent},deg_m_1},
        -     },
        - ) where {Tv,D,deg_m_1}
        5     deg = deg_m_1 + 1
        -     #! format: off
        5     t.children = ntuple(
       10         i -> i <= deg ? _wrap_nullable(children[i]) : NoTangent(), Val(D)
        -     )
        -     #! format: on
        - end
        - 
        - ################################################################################
        - # zero_tangent / randn_tangent
        - ################################################################################
        - 
        - struct InitHelper{F,ARGS<:Tuple,M<:Mooncake.MaybeCache}
       24     f::F
        -     args::ARGS
        -     dict::M
        - end
       77 function (helper::InitHelper)(p::N) where {T,D,N<:AbstractExpressionNode{T,D}}
       77     Tv = Mooncake.tangent_type(T)
       77     Tv === NoTangent && return NoTangent()
       99     return get!(helper.dict, p) do
       99         helper_inner(helper, p)
        -     end::TangentNode{Tv,D}
        - end
       99 @generated function helper_inner(
        -     helper::InitHelper, p::N
        - ) where {T,D,N<:AbstractExpressionNode{T,D}}
        1     quote
       99         Tv = Mooncake.tangent_type(T)
       99         deg = p.degree
       99         if deg == 0
       50             if p.constant
       25                 TangentNode{Tv,D}(helper_call(helper, p.val))
        -             else
       25                 TangentNode{Tv,D}(NoTangent())
        -             end
        -         else
       49             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i ->
        -                     TangentNode{Tv,D}(NoTangent(), map(helper, get_children(p, Val(i)))...),
        -             )
        -         end
        -     end
        - end
       25 function helper_call(helper::InitHelper, val)
       25     return helper.f(helper.args..., val, helper.dict)
        - end
        - 
        2 function Mooncake.zero_tangent_internal(
        -     p::N, dict::Mooncake.MaybeCache
        - ) where {T,N<:AbstractExpressionNode{T}}
       24     return InitHelper(Mooncake.zero_tangent_internal, (), dict)(p)
        - end
        - function Mooncake.randn_tangent_internal(
        -     rng::AbstractRNG, p::N, dict::Mooncake.MaybeCache
        - ) where {T,N<:AbstractExpressionNode{T}}
        -     return InitHelper(Mooncake.randn_tangent_internal, (rng,), dict)(p)
        - end
        - 
        - ################################################################################
        - # Inâ€‘place mutation helpers
        - ################################################################################
        - 
        - struct IncrementHelper{F,C<:Mooncake.IncCache}
        2     f::F
        -     cache::C
        - end
       22 @generated function (helper::IncrementHelper)(t::TangentNode{Tv,D}, s...) where {Tv,D}
        1     quote
       22         if haskey(helper.cache, t) || (!isempty(s) && t === first(s))
        0             return t
        -         end
       11         helper.cache[t] = true
       11         ts = (t, s...)
       11         deg = t.degree
       11         if deg == 0
        9             t.val = helper_call(helper, ts...)
        -         else
        5             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i -> set_children!(
        -                     t,
        -                     Base.Cartesian.@ntuple(
        -                         i, c -> helper(map(Base.Fix2(_get_child, Val(c)), ts)...),
        -                     )
        -                 )
        -             )
        -         end
       11         return t
        -     end
        - end
        6 function helper_call(helper::IncrementHelper, t, s...)
        9     return helper.f(helper.cache, t.val, map(ti -> ti.val, s)...)
        - end
        - 
        - function Mooncake.increment_internal!!(c::Mooncake.IncCache, t::TangentNode, s::TangentNode)
        -     return IncrementHelper(Mooncake.increment_internal!!, c)(t, s)
        - end
        2 function Mooncake.set_to_zero_internal!!(c::Mooncake.IncCache, t::TangentNode)
        2     return IncrementHelper(Mooncake.set_to_zero_internal!!, c)(t)
        - end
        - 
        - ################################################################################
        - # Algebraic helpers (_dot / _scale / _add_to_primal / _diff)
        - ################################################################################
        - 
        - @generated function Mooncake._dot_internal(
        -     c::Mooncake.MaybeCache, t::TangentNode{Tv,D}, s::TangentNode{Tv,D}
        - ) where {Tv,D}
        -     quote
        -         key = (t, s)
        -         haskey(c, key) && return c[key]::Float64
        -         c[key] = 0.0
        -         deg = t.degree
        -         res = if deg == 0
        -             if (t.val isa NoTangent || s.val isa NoTangent)
        -                 0.0
        -             else
        -                 Mooncake._dot_internal(c, t.val, s.val)
        -             end
        -         else
        -             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i -> Base.Cartesian.@ncall(
        -                     i,
        -                     +,
        -                     j -> Mooncake._dot_internal(c, get_child(t, j), get_child(s, j))
        -                 )
        -             )
        -         end
        -         c[key] = res
        -         return res
        -     end
        - end
        - 
        - function Mooncake._scale_internal(
        -     c::Mooncake.MaybeCache, a::Number, t::TangentNode{Tv,D}
        - ) where {Tv,D}
        -     return get!(c, t) do
        -         _scale_internal_helper(c, a, t)
        -     end::TangentNode{Tv,D}
        - end
        - @generated function _scale_internal_helper(
        -     c::Mooncake.MaybeCache, a::Number, t::TangentNode{Tv,D}
        - ) where {Tv,D}
        -     quote
        -         deg = t.degree
        -         if deg == 0
        -             TangentNode{Tv,D}(Mooncake._scale_internal(c, a, t.val))
        -         else
        -             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i -> Base.Cartesian.@ncall(
        -                     i,
        -                     TangentNode{Tv,D},
        -                     NoTangent(),
        -                     j -> Mooncake._scale_internal(c, a, get_child(t, j))
        -                 )
        -             )
        -         end
        -     end
        - end
        - 
        - function Mooncake._add_to_primal_internal(
        -     c::Mooncake.MaybeCache, p::N, t::TangentNode{Tv,D}, unsafe::Bool
        - ) where {T,D,N<:AbstractExpressionNode{T,D},Tv}
        -     key = (p, t, unsafe)
        -     return get!(c, key) do
        -         _add_to_primal_internal_helper(c, p, t, unsafe)
        -     end::N
        - end
        - @generated function _add_to_primal_internal_helper(
        -     c::Mooncake.MaybeCache, p::N, t::TangentNode{Tv,D}, unsafe::Bool
        - ) where {T,D,N<:AbstractExpressionNode{T,D},Tv}
        -     quote
        -         deg = p.degree
        -         if deg == 0
        -             new_leaf = leaf_copy(p)
        -             if p.constant
        -                 new_leaf.val = Mooncake._add_to_primal_internal(c, p.val, t.val, unsafe)
        -             end
        -             new_leaf
        -         else
        -             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i -> Base.Cartesian.@ncall(
        -                     i,
        -                     branch_copy,
        -                     p,
        -                     j -> Mooncake._add_to_primal_internal(
        -                         c, get_child(p, j), get_child(t, j), unsafe
        -                     )
        -                 )
        -             )
        -         end
        -     end
        - end
        - 
        - function Mooncake._diff_internal(
        -     c::Mooncake.MaybeCache, p::N, q::N
        - ) where {T,D,N<:AbstractExpressionNode{T,D}}
        -     Tv = Mooncake.tangent_type(T)
        -     Tv === NoTangent && return NoTangent()
        -     key = (p, q)
        -     return get!(c, key) do
        -         _diff_internal_helper(c, p, q)
        -     end::Union{TangentNode{Tv,D},NoTangent}
        - end
        - 
        - @generated function _diff_internal_helper(
        -     c::Mooncake.MaybeCache, p::N, q::N
        - ) where {T,D,N<:AbstractExpressionNode{T,D}}
        -     quote
        -         Tv = Mooncake.tangent_type(T)
        -         deg = p.degree
        -         if p.degree == 0
        -             if p.constant
        -                 TangentNode{Tv,D}(Mooncake._diff_internal(c, p.val, q.val))
        -             else
        -                 NoTangent()
        -             end
        -         else
        -             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i -> Base.Cartesian.@ncall(
        -                     i,
        -                     TangentNode{Tv,D},
        -                     NoTangent(),
        -                     j -> Mooncake._diff_internal(c, get_child(p, j), get_child(q, j))
        -                 )
        -             )
        -         end
        -     end
        - end
        - 
        - ################################################################################
        - # getfield / lgetfield rrules
        - ################################################################################
        - 
        0 @inline _field_sym(x::Symbol) = x
        - @inline _field_sym(i::Int) =
        -     if i == 1
        -         :degree
        -     elseif i == 2
        -         :val
        -     elseif i == 3
        -         :children
        -     else
        -         :non_differentiable
        -     end
        - @inline _field_sym(::Type{Val{F}}) where {F} = _field_sym(F)
        - @inline _field_sym(::Val{F}) where {F} = _field_sym(F)
        - 
        - struct Pullback{T,field_sym,n_args}
      256     pt::T
        - end
        0 function (pb::Pullback{T,field_sym,n_args})(Î”y_rdata) where {T,field_sym,n_args}
        0     if field_sym === :val && !(Î”y_rdata isa Mooncake.NoRData)
       12         pb.pt.val = Mooncake.increment_rdata!!(pb.pt.val, Î”y_rdata)
        -     end
        6     return ntuple(_ -> Mooncake.NoRData(), Val(n_args))
        - end
        - 
        0 function _rrule_getfield_common(
        -     obj_cd::Mooncake.CoDual{N,TangentNode{Tv,D}}, ::Val{field_sym}, ::Val{n_args}
        - ) where {T,D,N<:AbstractExpressionNode{T,D},Tv,field_sym,n_args}
      190     p = Mooncake.primal(obj_cd)
      190     pt = Mooncake.tangent(obj_cd)
        - 
      256     value_primal = getfield(p, field_sym)
        - 
        0     fdata_for_output = if field_sym === :val
       12         Mooncake.fdata(pt.val)
        0     elseif field_sym === :children
      162         map(value_primal, pt.children) do child_p, child_t
        0             if child_t isa Mooncake.NoTangent
       22                 Mooncake.uninit_fdata(child_p)
        -             else
      110                 Mooncake.FData(Mooncake.fdata(child_t))
        -             end
        -         end
        -     else
        -         # :degree or other non-differentiable fields
        0         Mooncake.NoFData()
        -     end
       16     y_cd = Mooncake.CoDual(value_primal, fdata_for_output)
      256     return y_cd, Pullback{typeof(pt),field_sym,n_args}(pt)
        - end
        - 
        - # lgetfield(AEN, Val{field})
        - Mooncake.@is_primitive Mooncake.MinimalCtx Tuple{
        -     typeof(Mooncake.lgetfield),AbstractExpressionNode,Val
        - }
        0 function Mooncake.rrule!!(
        -     ::Mooncake.CoDual{typeof(Mooncake.lgetfield)},
        -     obj_cd::Mooncake.CoDual{N,TangentNode{Tv,D}},
        -     vfield_cd::Mooncake.CoDual{Val{F},Mooncake.NoFData},
        - ) where {T,D,N<:AbstractExpressionNode{T,D},Tv,F}
      332     return _rrule_getfield_common(obj_cd, Val(_field_sym(F)), Val(3))
        - end
        - 
        - # getfield by Symbol
        - Mooncake.@is_primitive Mooncake.MinimalCtx Tuple{
        -     typeof(getfield),AbstractExpressionNode,Symbol
        - }
        - function Mooncake.rrule!!(
        -     ::Mooncake.CoDual{typeof(getfield)},
        -     obj_cd::Mooncake.CoDual{N,TangentNode{Tv,D}},
        -     sym_cd::Mooncake.CoDual{Symbol,Mooncake.NoFData},
        - ) where {T,D,N<:AbstractExpressionNode{T,D},Tv}
        -     return _rrule_getfield_common(obj_cd, Val(Mooncake.primal(sym_cd)), Val(3))
        - end
        - 
        - # getfield by Int
        - Mooncake.@is_primitive Mooncake.MinimalCtx Tuple{
        -     typeof(getfield),AbstractExpressionNode,Int
        - }
        - function Mooncake.rrule!!(
        -     ::Mooncake.CoDual{typeof(getfield)},
        -     obj_cd::Mooncake.CoDual{N,TangentNode{Tv,D}},
        -     idx_cd::Mooncake.CoDual{Int,Mooncake.NoFData},
        - ) where {T,D,N<:AbstractExpressionNode{T,D},Tv}
        -     return _rrule_getfield_common(obj_cd, _field_sym(Mooncake.primal(idx_cd)), 3)
        - end
        - 
        - ################################################################################
        - # Testâ€‘utility helpers
        - ################################################################################
        - 
        - @generated function Mooncake.TestUtils.populate_address_map_internal(
        -     m::Mooncake.TestUtils.AddressMap, p::N, t::TangentNode{Tv,D}
        - ) where {T,D,N<:AbstractExpressionNode{T,D},Tv}
        -     quote
        -         kp = Base.pointer_from_objref(p)
        -         kt = Base.pointer_from_objref(t)
        -         !haskey(m, kp) && (m[kp] = kt)
        -         deg = p.degree
        -         if deg == 0
        -             if p.constant
        -                 Mooncake.TestUtils.populate_address_map_internal(m, p.val, t.val)
        -             end
        -         else
        -             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i -> Base.Cartesian.@nexprs(
        -                     i,
        -                     j -> Mooncake.TestUtils.populate_address_map_internal(
        -                         m, get_child(p, j), get_child(t, j)
        -                     )
        -                 )
        -             )
        -         end
        -         return m
        -     end
        - end
        - 
        - function Mooncake.TestUtils.has_equal_data_internal(
        -     x::N, y::N, equndef::Bool, d::Dict{Tuple{UInt,UInt},Bool}
        - ) where {T,N<:AbstractExpressionNode{T}}
        -     idp = (objectid(x), objectid(y))
        -     # Just use regular `AbstractExpressionNode` Base.:(==)
        -     return get!(() -> x == y, d, idp)
        - end
        - 
        - function Mooncake.TestUtils.has_equal_data_internal(
        -     t::TangentNode{Tv,D},
        -     s::TangentNode{Tv,D},
        -     equndef::Bool,
        -     d::Dict{Tuple{UInt,UInt},Bool},
        - ) where {Tv,D}
        -     idp = (objectid(t), objectid(s))
        -     return get!(d, idp) do
        -         _has_equal_data_internal_helper(t, s, equndef, d)
        -     end
        - end
        - @generated function _has_equal_data_internal_helper(
        -     t::TangentNode{Tv,D},
        -     s::TangentNode{Tv,D},
        -     equndef::Bool,
        -     d::Dict{Tuple{UInt,UInt},Bool},
        - ) where {Tv,D}
        -     quote
        -         deg = t.degree
        -         deg == s.degree && if t.degree == 0
        -             Mooncake.TestUtils.has_equal_data_internal(t.val, s.val, equndef, d)
        -         else
        -             Base.Cartesian.@nif(
        -                 $D,
        -                 i -> i == deg,
        -                 i -> Base.Cartesian.@nall(
        -                     i,
        -                     j -> Mooncake.TestUtils.has_equal_data_internal(
        -                         get_child(t, j), get_child(s, j), equndef, d
        -                     )
        -                 )
        -             )
        -         end
        -     end
        - end
        - 
        - end
